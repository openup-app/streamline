// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/libsrt.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class LibsrtBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibsrtBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibsrtBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  ffi.Pointer<cmsghdr> __cmsg_nxthdr(
    ffi.Pointer<msghdr> __mhdr,
    ffi.Pointer<cmsghdr> __cmsg,
  ) {
    return ___cmsg_nxthdr(
      __mhdr,
      __cmsg,
    );
  }

  late final ___cmsg_nxthdrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cmsghdr> Function(
              ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>>('__cmsg_nxthdr');
  late final ___cmsg_nxthdr = ___cmsg_nxthdrPtr.asFunction<
      ffi.Pointer<cmsghdr> Function(
          ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>();

  int socket(
    int __domain,
    int __type,
    int __protocol,
  ) {
    return _socket(
      __domain,
      __type,
      __protocol,
    );
  }

  late final _socketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'socket');
  late final _socket = _socketPtr.asFunction<int Function(int, int, int)>();

  int socketpair(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int> __fds,
  ) {
    return _socketpair(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  late final _socketpairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('socketpair');
  late final _socketpair = _socketpairPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int bind(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _bind(
      __fd,
      __addr,
      __len,
    );
  }

  late final _bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('bind');
  late final _bind =
      _bindPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getsockname(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getsockname(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getsocknamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getsockname');
  late final _getsockname = _getsocknamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int connect(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    return _connect(
      __fd,
      __addr,
      __len,
    );
  }

  late final _connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('connect');
  late final _connect =
      _connectPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getpeername(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __len,
  ) {
    return _getpeername(
      __fd,
      __addr,
      __len,
    );
  }

  late final _getpeernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getpeername');
  late final _getpeername = _getpeernamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int send(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _send(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _sendPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('send');
  late final _send =
      _sendPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int recv(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    return _recv(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  late final _recvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('recv');
  late final _recv =
      _recvPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int sendto(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    int __addr_len,
  ) {
    return _sendto(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _sendtoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ffi.Pointer<sockaddr>, socklen_t)>>('sendto');
  late final _sendto = _sendtoPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>, int)>();

  int recvfrom(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _recvfrom(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  late final _recvfromPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>('recvfrom');
  late final _recvfrom = _recvfromPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>,
          ffi.Pointer<socklen_t>)>();

  int sendmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _sendmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('sendmsg');
  late final _sendmsg =
      _sendmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int recvmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    return _recvmsg(
      __fd,
      __message,
      __flags,
    );
  }

  late final _recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('recvmsg');
  late final _recvmsg =
      _recvmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int getsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<socklen_t> __optlen,
  ) {
    return _getsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>>('getsockopt');
  late final _getsockopt = _getsockoptPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<socklen_t>)>();

  int setsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    return _setsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  late final _setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              socklen_t)>>('setsockopt');
  late final _setsockopt = _setsockoptPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int listen(
    int __fd,
    int __n,
  ) {
    return _listen(
      __fd,
      __n,
    );
  }

  late final _listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('listen');
  late final _listen = _listenPtr.asFunction<int Function(int, int)>();

  int accept(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<socklen_t> __addr_len,
  ) {
    return _accept(
      __fd,
      __addr,
      __addr_len,
    );
  }

  late final _acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('accept');
  late final _accept = _acceptPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int shutdown(
    int __fd,
    int __how,
  ) {
    return _shutdown(
      __fd,
      __how,
    );
  }

  late final _shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'shutdown');
  late final _shutdown = _shutdownPtr.asFunction<int Function(int, int)>();

  int sockatmark(
    int __fd,
  ) {
    return _sockatmark(
      __fd,
    );
  }

  late final _sockatmarkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sockatmark');
  late final _sockatmark = _sockatmarkPtr.asFunction<int Function(int)>();

  int isfdtype(
    int __fd,
    int __fdtype,
  ) {
    return _isfdtype(
      __fd,
      __fdtype,
    );
  }

  late final _isfdtypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'isfdtype');
  late final _isfdtype = _isfdtypePtr.asFunction<int Function(int, int)>();

  int ioctl(
    int __fd,
    int __request,
  ) {
    return _ioctl(
      __fd,
      __request,
    );
  }

  late final _ioctlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedLong)>>(
          'ioctl');
  late final _ioctl = _ioctlPtr.asFunction<int Function(int, int)>();

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<ffi.Void> __tz,
  ) {
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone> __tz,
  ) {
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone>)>();

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    return _getitimer(
      __which,
      __value,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __itimer_which_t, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__itimer_which_t, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _utimes(
      __file,
      __tvp,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _lutimes(
      __file,
      __tvp,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _futimes(
      __fd,
      __tvp,
    );
  }

  late final _futimesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>(
      'futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  late final ffi.Pointer<in6_addr> _in6addr_any =
      _lookup<in6_addr>('in6addr_any');

  in6_addr get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<in6_addr> _in6addr_loopback =
      _lookup<in6_addr>('in6addr_loopback');

  in6_addr get in6addr_loopback => _in6addr_loopback.ref;

  int ntohl(
    int __netlong,
  ) {
    return _ntohl(
      __netlong,
    );
  }

  late final _ntohlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('ntohl');
  late final _ntohl = _ntohlPtr.asFunction<int Function(int)>();

  int ntohs(
    int __netshort,
  ) {
    return _ntohs(
      __netshort,
    );
  }

  late final _ntohsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('ntohs');
  late final _ntohs = _ntohsPtr.asFunction<int Function(int)>();

  int htonl(
    int __hostlong,
  ) {
    return _htonl(
      __hostlong,
    );
  }

  late final _htonlPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>('htonl');
  late final _htonl = _htonlPtr.asFunction<int Function(int)>();

  int htons(
    int __hostshort,
  ) {
    return _htons(
      __hostshort,
    );
  }

  late final _htonsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>('htons');
  late final _htons = _htonsPtr.asFunction<int Function(int)>();

  int bindresvport(
    int __sockfd,
    ffi.Pointer<sockaddr_in> __sock_in,
  ) {
    return _bindresvport(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>('bindresvport');
  late final _bindresvport = _bindresvportPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in>)>();

  int bindresvport6(
    int __sockfd,
    ffi.Pointer<sockaddr_in6> __sock_in,
  ) {
    return _bindresvport6(
      __sockfd,
      __sock_in,
    );
  }

  late final _bindresvport6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr_in6>)>>('bindresvport6');
  late final _bindresvport6 = _bindresvport6Ptr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in6>)>();

  void setrpcent(
    int __stayopen,
  ) {
    return _setrpcent(
      __stayopen,
    );
  }

  late final _setrpcentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setrpcent');
  late final _setrpcent = _setrpcentPtr.asFunction<void Function(int)>();

  void endrpcent() {
    return _endrpcent();
  }

  late final _endrpcentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endrpcent');
  late final _endrpcent = _endrpcentPtr.asFunction<void Function()>();

  ffi.Pointer<rpcent> getrpcbyname(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getrpcbyname(
      __name,
    );
  }

  late final _getrpcbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<rpcent> Function(ffi.Pointer<ffi.Char>)>>('getrpcbyname');
  late final _getrpcbyname = _getrpcbynamePtr
      .asFunction<ffi.Pointer<rpcent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<rpcent> getrpcbynumber(
    int __number,
  ) {
    return _getrpcbynumber(
      __number,
    );
  }

  late final _getrpcbynumberPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<rpcent> Function(ffi.Int)>>(
          'getrpcbynumber');
  late final _getrpcbynumber =
      _getrpcbynumberPtr.asFunction<ffi.Pointer<rpcent> Function(int)>();

  ffi.Pointer<rpcent> getrpcent() {
    return _getrpcent();
  }

  late final _getrpcentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<rpcent> Function()>>('getrpcent');
  late final _getrpcent =
      _getrpcentPtr.asFunction<ffi.Pointer<rpcent> Function()>();

  int getrpcbyname_r(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<rpcent> __result_buf,
    ffi.Pointer<ffi.Char> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<rpcent>> __result,
  ) {
    return _getrpcbyname_r(
      __name,
      __result_buf,
      __buffer,
      __buflen,
      __result,
    );
  }

  late final _getrpcbyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<rpcent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<rpcent>>)>>('getrpcbyname_r');
  late final _getrpcbyname_r = _getrpcbyname_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<rpcent>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<rpcent>>)>();

  int getrpcbynumber_r(
    int __number,
    ffi.Pointer<rpcent> __result_buf,
    ffi.Pointer<ffi.Char> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<rpcent>> __result,
  ) {
    return _getrpcbynumber_r(
      __number,
      __result_buf,
      __buffer,
      __buflen,
      __result,
    );
  }

  late final _getrpcbynumber_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<rpcent>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.Pointer<rpcent>>)>>('getrpcbynumber_r');
  late final _getrpcbynumber_r = _getrpcbynumber_rPtr.asFunction<
      int Function(int, ffi.Pointer<rpcent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<rpcent>>)>();

  int getrpcent_r(
    ffi.Pointer<rpcent> __result_buf,
    ffi.Pointer<ffi.Char> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<rpcent>> __result,
  ) {
    return _getrpcent_r(
      __result_buf,
      __buffer,
      __buflen,
      __result,
    );
  }

  late final _getrpcent_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<rpcent>, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Pointer<rpcent>>)>>('getrpcent_r');
  late final _getrpcent_r = _getrpcent_rPtr.asFunction<
      int Function(ffi.Pointer<rpcent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<rpcent>>)>();

  ffi.Pointer<ffi.Int> __h_errno_location() {
    return ___h_errno_location();
  }

  late final ___h_errno_locationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__h_errno_location');
  late final ___h_errno_location =
      ___h_errno_locationPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  void herror(
    ffi.Pointer<ffi.Char> __str,
  ) {
    return _herror(
      __str,
    );
  }

  late final _herrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'herror');
  late final _herror =
      _herrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> hstrerror(
    int __err_num,
  ) {
    return _hstrerror(
      __err_num,
    );
  }

  late final _hstrerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'hstrerror');
  late final _hstrerror =
      _hstrerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void sethostent(
    int __stay_open,
  ) {
    return _sethostent(
      __stay_open,
    );
  }

  late final _sethostentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('sethostent');
  late final _sethostent = _sethostentPtr.asFunction<void Function(int)>();

  void endhostent() {
    return _endhostent();
  }

  late final _endhostentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endhostent');
  late final _endhostent = _endhostentPtr.asFunction<void Function()>();

  ffi.Pointer<hostent> gethostent() {
    return _gethostent();
  }

  late final _gethostentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hostent> Function()>>(
          'gethostent');
  late final _gethostent =
      _gethostentPtr.asFunction<ffi.Pointer<hostent> Function()>();

  ffi.Pointer<hostent> gethostbyaddr(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __type,
  ) {
    return _gethostbyaddr(
      __addr,
      __len,
      __type,
    );
  }

  late final _gethostbyaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Void>, __socklen_t, ffi.Int)>>('gethostbyaddr');
  late final _gethostbyaddr = _gethostbyaddrPtr.asFunction<
      ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<hostent> gethostbyname(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _gethostbyname(
      __name,
    );
  }

  late final _gethostbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>)>>('gethostbyname');
  late final _gethostbyname = _gethostbynamePtr
      .asFunction<ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<hostent> gethostbyname2(
    ffi.Pointer<ffi.Char> __name,
    int __af,
  ) {
    return _gethostbyname2(
      __name,
      __af,
    );
  }

  late final _gethostbyname2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('gethostbyname2');
  late final _gethostbyname2 = _gethostbyname2Ptr
      .asFunction<ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>, int)>();

  int gethostent_r(
    ffi.Pointer<hostent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<hostent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _gethostent_r(
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _gethostent_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<hostent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<hostent>>,
              ffi.Pointer<ffi.Int>)>>('gethostent_r');
  late final _gethostent_r = _gethostent_rPtr.asFunction<
      int Function(ffi.Pointer<hostent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<hostent>>, ffi.Pointer<ffi.Int>)>();

  int gethostbyaddr_r(
    ffi.Pointer<ffi.Void> __addr,
    int __len,
    int __type,
    ffi.Pointer<hostent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<hostent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _gethostbyaddr_r(
      __addr,
      __len,
      __type,
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _gethostbyaddr_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              __socklen_t,
              ffi.Int,
              ffi.Pointer<hostent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<hostent>>,
              ffi.Pointer<ffi.Int>)>>('gethostbyaddr_r');
  late final _gethostbyaddr_r = _gethostbyaddr_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<hostent>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<hostent>>,
          ffi.Pointer<ffi.Int>)>();

  int gethostbyname_r(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<hostent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<hostent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _gethostbyname_r(
      __name,
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _gethostbyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<hostent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<hostent>>,
              ffi.Pointer<ffi.Int>)>>('gethostbyname_r');
  late final _gethostbyname_r = _gethostbyname_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<hostent>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<hostent>>,
          ffi.Pointer<ffi.Int>)>();

  int gethostbyname2_r(
    ffi.Pointer<ffi.Char> __name,
    int __af,
    ffi.Pointer<hostent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<hostent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _gethostbyname2_r(
      __name,
      __af,
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _gethostbyname2_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<hostent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<hostent>>,
              ffi.Pointer<ffi.Int>)>>('gethostbyname2_r');
  late final _gethostbyname2_r = _gethostbyname2_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<hostent>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<hostent>>,
          ffi.Pointer<ffi.Int>)>();

  void setnetent(
    int __stay_open,
  ) {
    return _setnetent(
      __stay_open,
    );
  }

  late final _setnetentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setnetent');
  late final _setnetent = _setnetentPtr.asFunction<void Function(int)>();

  void endnetent() {
    return _endnetent();
  }

  late final _endnetentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endnetent');
  late final _endnetent = _endnetentPtr.asFunction<void Function()>();

  ffi.Pointer<netent> getnetent() {
    return _getnetent();
  }

  late final _getnetentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<netent> Function()>>('getnetent');
  late final _getnetent =
      _getnetentPtr.asFunction<ffi.Pointer<netent> Function()>();

  ffi.Pointer<netent> getnetbyaddr(
    int __net,
    int __type,
  ) {
    return _getnetbyaddr(
      __net,
      __type,
    );
  }

  late final _getnetbyaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<netent> Function(ffi.Uint32, ffi.Int)>>('getnetbyaddr');
  late final _getnetbyaddr =
      _getnetbyaddrPtr.asFunction<ffi.Pointer<netent> Function(int, int)>();

  ffi.Pointer<netent> getnetbyname(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getnetbyname(
      __name,
    );
  }

  late final _getnetbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<netent> Function(ffi.Pointer<ffi.Char>)>>('getnetbyname');
  late final _getnetbyname = _getnetbynamePtr
      .asFunction<ffi.Pointer<netent> Function(ffi.Pointer<ffi.Char>)>();

  int getnetent_r(
    ffi.Pointer<netent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<netent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _getnetent_r(
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _getnetent_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<netent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<netent>>,
              ffi.Pointer<ffi.Int>)>>('getnetent_r');
  late final _getnetent_r = _getnetent_rPtr.asFunction<
      int Function(ffi.Pointer<netent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<netent>>, ffi.Pointer<ffi.Int>)>();

  int getnetbyaddr_r(
    int __net,
    int __type,
    ffi.Pointer<netent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<netent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _getnetbyaddr_r(
      __net,
      __type,
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _getnetbyaddr_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Uint32,
              ffi.Int,
              ffi.Pointer<netent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<netent>>,
              ffi.Pointer<ffi.Int>)>>('getnetbyaddr_r');
  late final _getnetbyaddr_r = _getnetbyaddr_rPtr.asFunction<
      int Function(int, int, ffi.Pointer<netent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<netent>>, ffi.Pointer<ffi.Int>)>();

  int getnetbyname_r(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<netent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<netent>> __result,
    ffi.Pointer<ffi.Int> __h_errnop,
  ) {
    return _getnetbyname_r(
      __name,
      __result_buf,
      __buf,
      __buflen,
      __result,
      __h_errnop,
    );
  }

  late final _getnetbyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<netent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<netent>>,
              ffi.Pointer<ffi.Int>)>>('getnetbyname_r');
  late final _getnetbyname_r = _getnetbyname_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<netent>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<netent>>,
          ffi.Pointer<ffi.Int>)>();

  void setservent(
    int __stay_open,
  ) {
    return _setservent(
      __stay_open,
    );
  }

  late final _setserventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setservent');
  late final _setservent = _setserventPtr.asFunction<void Function(int)>();

  void endservent() {
    return _endservent();
  }

  late final _endserventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endservent');
  late final _endservent = _endserventPtr.asFunction<void Function()>();

  ffi.Pointer<servent> getservent() {
    return _getservent();
  }

  late final _getserventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<servent> Function()>>(
          'getservent');
  late final _getservent =
      _getserventPtr.asFunction<ffi.Pointer<servent> Function()>();

  ffi.Pointer<servent> getservbyname(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __proto,
  ) {
    return _getservbyname(
      __name,
      __proto,
    );
  }

  late final _getservbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<servent> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('getservbyname');
  late final _getservbyname = _getservbynamePtr.asFunction<
      ffi.Pointer<servent> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<servent> getservbyport(
    int __port,
    ffi.Pointer<ffi.Char> __proto,
  ) {
    return _getservbyport(
      __port,
      __proto,
    );
  }

  late final _getservbyportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<servent> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('getservbyport');
  late final _getservbyport = _getservbyportPtr
      .asFunction<ffi.Pointer<servent> Function(int, ffi.Pointer<ffi.Char>)>();

  int getservent_r(
    ffi.Pointer<servent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<servent>> __result,
  ) {
    return _getservent_r(
      __result_buf,
      __buf,
      __buflen,
      __result,
    );
  }

  late final _getservent_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<servent>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.Pointer<servent>>)>>('getservent_r');
  late final _getservent_r = _getservent_rPtr.asFunction<
      int Function(ffi.Pointer<servent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<servent>>)>();

  int getservbyname_r(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __proto,
    ffi.Pointer<servent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<servent>> __result,
  ) {
    return _getservbyname_r(
      __name,
      __proto,
      __result_buf,
      __buf,
      __buflen,
      __result,
    );
  }

  late final _getservbyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<servent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<servent>>)>>('getservbyname_r');
  late final _getservbyname_r = _getservbyname_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<servent>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<servent>>)>();

  int getservbyport_r(
    int __port,
    ffi.Pointer<ffi.Char> __proto,
    ffi.Pointer<servent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<servent>> __result,
  ) {
    return _getservbyport_r(
      __port,
      __proto,
      __result_buf,
      __buf,
      __buflen,
      __result,
    );
  }

  late final _getservbyport_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<servent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<servent>>)>>('getservbyport_r');
  late final _getservbyport_r = _getservbyport_rPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<servent>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<servent>>)>();

  void setprotoent(
    int __stay_open,
  ) {
    return _setprotoent(
      __stay_open,
    );
  }

  late final _setprotoentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setprotoent');
  late final _setprotoent = _setprotoentPtr.asFunction<void Function(int)>();

  void endprotoent() {
    return _endprotoent();
  }

  late final _endprotoentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endprotoent');
  late final _endprotoent = _endprotoentPtr.asFunction<void Function()>();

  ffi.Pointer<protoent> getprotoent() {
    return _getprotoent();
  }

  late final _getprotoentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<protoent> Function()>>(
          'getprotoent');
  late final _getprotoent =
      _getprotoentPtr.asFunction<ffi.Pointer<protoent> Function()>();

  ffi.Pointer<protoent> getprotobyname(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getprotobyname(
      __name,
    );
  }

  late final _getprotobynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<protoent> Function(
              ffi.Pointer<ffi.Char>)>>('getprotobyname');
  late final _getprotobyname = _getprotobynamePtr
      .asFunction<ffi.Pointer<protoent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<protoent> getprotobynumber(
    int __proto,
  ) {
    return _getprotobynumber(
      __proto,
    );
  }

  late final _getprotobynumberPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<protoent> Function(ffi.Int)>>(
          'getprotobynumber');
  late final _getprotobynumber =
      _getprotobynumberPtr.asFunction<ffi.Pointer<protoent> Function(int)>();

  int getprotoent_r(
    ffi.Pointer<protoent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<protoent>> __result,
  ) {
    return _getprotoent_r(
      __result_buf,
      __buf,
      __buflen,
      __result,
    );
  }

  late final _getprotoent_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<protoent>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.Pointer<protoent>>)>>('getprotoent_r');
  late final _getprotoent_r = _getprotoent_rPtr.asFunction<
      int Function(ffi.Pointer<protoent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<protoent>>)>();

  int getprotobyname_r(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<protoent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<protoent>> __result,
  ) {
    return _getprotobyname_r(
      __name,
      __result_buf,
      __buf,
      __buflen,
      __result,
    );
  }

  late final _getprotobyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<protoent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<protoent>>)>>('getprotobyname_r');
  late final _getprotobyname_r = _getprotobyname_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<protoent>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<protoent>>)>();

  int getprotobynumber_r(
    int __proto,
    ffi.Pointer<protoent> __result_buf,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
    ffi.Pointer<ffi.Pointer<protoent>> __result,
  ) {
    return _getprotobynumber_r(
      __proto,
      __result_buf,
      __buf,
      __buflen,
      __result,
    );
  }

  late final _getprotobynumber_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<protoent>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<protoent>>)>>('getprotobynumber_r');
  late final _getprotobynumber_r = _getprotobynumber_rPtr.asFunction<
      int Function(int, ffi.Pointer<protoent>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<protoent>>)>();

  int setnetgrent(
    ffi.Pointer<ffi.Char> __netgroup,
  ) {
    return _setnetgrent(
      __netgroup,
    );
  }

  late final _setnetgrentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setnetgrent');
  late final _setnetgrent =
      _setnetgrentPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void endnetgrent() {
    return _endnetgrent();
  }

  late final _endnetgrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endnetgrent');
  late final _endnetgrent = _endnetgrentPtr.asFunction<void Function()>();

  int getnetgrent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __hostp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __userp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __domainp,
  ) {
    return _getnetgrent(
      __hostp,
      __userp,
      __domainp,
    );
  }

  late final _getnetgrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getnetgrent');
  late final _getnetgrent = _getnetgrentPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int innetgr(
    ffi.Pointer<ffi.Char> __netgroup,
    ffi.Pointer<ffi.Char> __host,
    ffi.Pointer<ffi.Char> __user,
    ffi.Pointer<ffi.Char> __domain,
  ) {
    return _innetgr(
      __netgroup,
      __host,
      __user,
      __domain,
    );
  }

  late final _innetgrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('innetgr');
  late final _innetgr = _innetgrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int getnetgrent_r(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __hostp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __userp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __domainp,
    ffi.Pointer<ffi.Char> __buffer,
    int __buflen,
  ) {
    return _getnetgrent_r(
      __hostp,
      __userp,
      __domainp,
      __buffer,
      __buflen,
    );
  }

  late final _getnetgrent_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('getnetgrent_r');
  late final _getnetgrent_r = _getnetgrent_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ahost,
    int __rport,
    ffi.Pointer<ffi.Char> __locuser,
    ffi.Pointer<ffi.Char> __remuser,
    ffi.Pointer<ffi.Char> __cmd,
    ffi.Pointer<ffi.Int> __fd2p,
  ) {
    return _rcmd(
      __ahost,
      __rport,
      __locuser,
      __remuser,
      __cmd,
      __fd2p,
    );
  }

  late final _rcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedShort,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('rcmd');
  late final _rcmd = _rcmdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ahost,
    int __rport,
    ffi.Pointer<ffi.Char> __locuser,
    ffi.Pointer<ffi.Char> __remuser,
    ffi.Pointer<ffi.Char> __cmd,
    ffi.Pointer<ffi.Int> __fd2p,
    int __af,
  ) {
    return _rcmd_af(
      __ahost,
      __rport,
      __locuser,
      __remuser,
      __cmd,
      __fd2p,
      __af,
    );
  }

  late final _rcmd_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedShort,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              sa_family_t)>>('rcmd_af');
  late final _rcmd_af = _rcmd_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int rexec(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ahost,
    int __rport,
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __pass,
    ffi.Pointer<ffi.Char> __cmd,
    ffi.Pointer<ffi.Int> __fd2p,
  ) {
    return _rexec(
      __ahost,
      __rport,
      __name,
      __pass,
      __cmd,
      __fd2p,
    );
  }

  late final _rexecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('rexec');
  late final _rexec = _rexecPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int rexec_af(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ahost,
    int __rport,
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __pass,
    ffi.Pointer<ffi.Char> __cmd,
    ffi.Pointer<ffi.Int> __fd2p,
    int __af,
  ) {
    return _rexec_af(
      __ahost,
      __rport,
      __name,
      __pass,
      __cmd,
      __fd2p,
      __af,
    );
  }

  late final _rexec_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              sa_family_t)>>('rexec_af');
  late final _rexec_af = _rexec_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int ruserok(
    ffi.Pointer<ffi.Char> __rhost,
    int __suser,
    ffi.Pointer<ffi.Char> __remuser,
    ffi.Pointer<ffi.Char> __locuser,
  ) {
    return _ruserok(
      __rhost,
      __suser,
      __remuser,
      __locuser,
    );
  }

  late final _ruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ruserok');
  late final _ruserok = _ruserokPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ruserok_af(
    ffi.Pointer<ffi.Char> __rhost,
    int __suser,
    ffi.Pointer<ffi.Char> __remuser,
    ffi.Pointer<ffi.Char> __locuser,
    int __af,
  ) {
    return _ruserok_af(
      __rhost,
      __suser,
      __remuser,
      __locuser,
      __af,
    );
  }

  late final _ruserok_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              sa_family_t)>>('ruserok_af');
  late final _ruserok_af = _ruserok_afPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int iruserok(
    int __raddr,
    int __suser,
    ffi.Pointer<ffi.Char> __remuser,
    ffi.Pointer<ffi.Char> __locuser,
  ) {
    return _iruserok(
      __raddr,
      __suser,
      __remuser,
      __locuser,
    );
  }

  late final _iruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint32, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('iruserok');
  late final _iruserok = _iruserokPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int iruserok_af(
    ffi.Pointer<ffi.Void> __raddr,
    int __suser,
    ffi.Pointer<ffi.Char> __remuser,
    ffi.Pointer<ffi.Char> __locuser,
    int __af,
  ) {
    return _iruserok_af(
      __raddr,
      __suser,
      __remuser,
      __locuser,
      __af,
    );
  }

  late final _iruserok_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              sa_family_t)>>('iruserok_af');
  late final _iruserok_af = _iruserok_afPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int rresvport(
    ffi.Pointer<ffi.Int> __alport,
  ) {
    return _rresvport(
      __alport,
    );
  }

  late final _rresvportPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'rresvport');
  late final _rresvport =
      _rresvportPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int rresvport_af(
    ffi.Pointer<ffi.Int> __alport,
    int __af,
  ) {
    return _rresvport_af(
      __alport,
      __af,
    );
  }

  late final _rresvport_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, sa_family_t)>>('rresvport_af');
  late final _rresvport_af =
      _rresvport_afPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int getaddrinfo(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __service,
    ffi.Pointer<addrinfo> __req,
    ffi.Pointer<ffi.Pointer<addrinfo>> __pai,
  ) {
    return _getaddrinfo(
      __name,
      __service,
      __req,
      __pai,
    );
  }

  late final _getaddrinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<addrinfo>,
              ffi.Pointer<ffi.Pointer<addrinfo>>)>>('getaddrinfo');
  late final _getaddrinfo = _getaddrinfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<addrinfo>, ffi.Pointer<ffi.Pointer<addrinfo>>)>();

  void freeaddrinfo(
    ffi.Pointer<addrinfo> __ai,
  ) {
    return _freeaddrinfo(
      __ai,
    );
  }

  late final _freeaddrinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<addrinfo>)>>(
          'freeaddrinfo');
  late final _freeaddrinfo =
      _freeaddrinfoPtr.asFunction<void Function(ffi.Pointer<addrinfo>)>();

  ffi.Pointer<ffi.Char> gai_strerror(
    int __ecode,
  ) {
    return _gai_strerror(
      __ecode,
    );
  }

  late final _gai_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'gai_strerror');
  late final _gai_strerror =
      _gai_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int getnameinfo(
    ffi.Pointer<sockaddr> __sa,
    int __salen,
    ffi.Pointer<ffi.Char> __host,
    int __hostlen,
    ffi.Pointer<ffi.Char> __serv,
    int __servlen,
    int __flags,
  ) {
    return _getnameinfo(
      __sa,
      __salen,
      __host,
      __hostlen,
      __serv,
      __servlen,
      __flags,
    );
  }

  late final _getnameinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sockaddr>,
              socklen_t,
              ffi.Pointer<ffi.Char>,
              socklen_t,
              ffi.Pointer<ffi.Char>,
              socklen_t,
              ffi.Int)>>('getnameinfo');
  late final _getnameinfo = _getnameinfoPtr.asFunction<
      int Function(ffi.Pointer<sockaddr>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int)>();

  int inet_addr(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_addr(
      __cp,
    );
  }

  late final _inet_addrPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_addr');
  late final _inet_addr =
      _inet_addrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int inet_lnaof(
    in_addr __in,
  ) {
    return _inet_lnaof(
      __in,
    );
  }

  late final _inet_lnaofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_lnaof');
  late final _inet_lnaof = _inet_lnaofPtr.asFunction<int Function(in_addr)>();

  in_addr inet_makeaddr(
    int __net,
    int __host,
  ) {
    return _inet_makeaddr(
      __net,
      __host,
    );
  }

  late final _inet_makeaddrPtr =
      _lookup<ffi.NativeFunction<in_addr Function(in_addr_t, in_addr_t)>>(
          'inet_makeaddr');
  late final _inet_makeaddr =
      _inet_makeaddrPtr.asFunction<in_addr Function(int, int)>();

  int inet_netof(
    in_addr __in,
  ) {
    return _inet_netof(
      __in,
    );
  }

  late final _inet_netofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_netof');
  late final _inet_netof = _inet_netofPtr.asFunction<int Function(in_addr)>();

  int inet_network(
    ffi.Pointer<ffi.Char> __cp,
  ) {
    return _inet_network(
      __cp,
    );
  }

  late final _inet_networkPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_network');
  late final _inet_network =
      _inet_networkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> inet_ntoa(
    in_addr __in,
  ) {
    return _inet_ntoa(
      __in,
    );
  }

  late final _inet_ntoaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(in_addr)>>(
          'inet_ntoa');
  late final _inet_ntoa =
      _inet_ntoaPtr.asFunction<ffi.Pointer<ffi.Char> Function(in_addr)>();

  int inet_pton(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
  ) {
    return _inet_pton(
      __af,
      __cp,
      __buf,
    );
  }

  late final _inet_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('inet_pton');
  late final _inet_pton = _inet_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> inet_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_ntop(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, socklen_t)>>('inet_ntop');
  late final _inet_ntop = _inet_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int inet_aton(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<in_addr> __inp,
  ) {
    return _inet_aton(
      __cp,
      __inp,
    );
  }

  late final _inet_atonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>>('inet_aton');
  late final _inet_aton = _inet_atonPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>();

  ffi.Pointer<ffi.Char> inet_neta(
    int __net,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_neta(
      __net,
      __buf,
      __len,
    );
  }

  late final _inet_netaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              in_addr_t, ffi.Pointer<ffi.Char>, ffi.Size)>>('inet_neta');
  late final _inet_neta = _inet_netaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> inet_net_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    int __bits,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _inet_net_ntop(
      __af,
      __cp,
      __bits,
      __buf,
      __len,
    );
  }

  late final _inet_net_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('inet_net_ntop');
  late final _inet_net_ntop = _inet_net_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int inet_net_pton(
    int __af,
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.Void> __buf,
    int __len,
  ) {
    return _inet_net_pton(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_net_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('inet_net_pton');
  late final _inet_net_pton = _inet_net_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  int inet_nsap_addr(
    ffi.Pointer<ffi.Char> __cp,
    ffi.Pointer<ffi.UnsignedChar> __buf,
    int __len,
  ) {
    return _inet_nsap_addr(
      __cp,
      __buf,
      __len,
    );
  }

  late final _inet_nsap_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('inet_nsap_addr');
  late final _inet_nsap_addr = _inet_nsap_addrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Char> inet_nsap_ntoa(
    int __len,
    ffi.Pointer<ffi.UnsignedChar> __cp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _inet_nsap_ntoa(
      __len,
      __cp,
      __buf,
    );
  }

  late final _inet_nsap_ntoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('inet_nsap_ntoa');
  late final _inet_nsap_ntoa = _inet_nsap_ntoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  int access(
    ffi.Pointer<ffi.Char> __name,
    int __type,
  ) {
    return _access(
      __name,
      __type,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __type,
    int __flag,
  ) {
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Int, __off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  void closefrom(
    int __lowfd,
  ) {
    return _closefrom(
      __lowfd,
    );
  }

  late final _closefromPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('closefrom');
  late final _closefrom = _closefromPtr.asFunction<void Function(int)>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pipe(
    ffi.Pointer<ffi.Int> __pipedes,
  ) {
    return _pipe(
      __pipedes,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int alarm(
    int __seconds,
  ) {
    return _alarm(
      __seconds,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int sleep(
    int __seconds,
  ) {
    return _sleep(
      __seconds,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int ualarm(
    int __value,
    int __interval,
  ) {
    return _ualarm(
      __value,
      __interval,
    );
  }

  late final _ualarmPtr = _lookup<
      ffi.NativeFunction<
          __useconds_t Function(__useconds_t, __useconds_t)>>('ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int __useconds,
  ) {
    return _usleep(
      __useconds,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int chown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __uid_t, __gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int lchown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __uid_t, __gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int chdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chdir(
      __path,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int fchdir(
    int __fd,
  ) {
    return _fchdir(
      __fd,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _getcwd(
      __buf,
      __size,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _getwd(
      __buf,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int dup(
    int __fd,
  ) {
    return _dup(
      __fd,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int __fd,
    int __fd2,
  ) {
    return _dup2(
      __fd,
      __fd2,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___environ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__environ');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __environ => ___environ.value;

  set __environ(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___environ.value = value;

  int execve(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  late final _fexecvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fexecve');
  late final _fexecve = _fexecvePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execle(
      __path,
      __arg,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execl(
      __path,
      __arg,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execlp(
      __file,
      __arg,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nice(
    int __inc,
  ) {
    return _nice(
      __inc,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  void _exit(
    int __status,
  ) {
    return __exit(
      __status,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> __path,
    int __name,
  ) {
    return _pathconf(
      __path,
      __name,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fpathconf(
    int __fd,
    int __name,
  ) {
    return _fpathconf(
      __fd,
      __name,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  int sysconf(
    int __name,
  ) {
    return _sysconf(
      __name,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int confstr(
    int __name,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int __getpgid(
    int __pid,
  ) {
    return ___getpgid(
      __pid,
    );
  }

  late final ___getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('__getpgid');
  late final ___getpgid = ___getpgidPtr.asFunction<int Function(int)>();

  int getpgid(
    int __pid,
  ) {
    return _getpgid(
      __pid,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, __pid_t)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int getsid(
    int __pid,
  ) {
    return _getsid(
      __pid,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<__uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<__uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<__gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<__gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int getgroups(
    int __size,
    ffi.Pointer<__gid_t> __list,
  ) {
    return _getgroups(
      __size,
      __list,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<__gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<__gid_t>)>();

  int setuid(
    int __uid,
  ) {
    return _setuid(
      __uid,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t, __uid_t)>>(
          'setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int seteuid(
    int __uid,
  ) {
    return _seteuid(
      __uid,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setgid(
    int __gid,
  ) {
    return _setgid(
      __gid,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setregid(
    int __rgid,
    int __egid,
  ) {
    return _setregid(
      __rgid,
      __egid,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t, __gid_t)>>(
          'setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setegid(
    int __gid,
  ) {
    return _setegid(
      __gid,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ttyname(
    int __fd,
  ) {
    return _ttyname(
      __fd,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int isatty(
    int __fd,
  ) {
    return _isatty(
      __fd,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int link(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _link(
      __from,
      __to,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
    int __flags,
  ) {
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int symlink(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlink(
      __from,
      __to,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int readlink(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unlink(
      __name,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __name,
    int __flag,
  ) {
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _rmdir(
      __path,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> __name,
    int __name_len,
  ) {
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _setlogin(
      __name,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ___argv,
    ffi.Pointer<ffi.Char> __shortopts,
  ) {
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int gethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _gethostname(
      __name,
      __len,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _sethostname(
      __name,
      __len,
    );
  }

  late final _sethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostid(
    int __id,
  ) {
    return _sethostid(
      __id,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<int Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _getdomainname(
      __name,
      __len,
    );
  }

  late final _getdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _setdomainname(
      __name,
      __len,
    );
  }

  late final _setdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vhangup() {
    return _vhangup();
  }

  late final _vhangupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vhangup');
  late final _vhangup = _vhangupPtr.asFunction<int Function()>();

  int revoke(
    ffi.Pointer<ffi.Char> __file,
  ) {
    return _revoke(
      __file,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int profil(
    ffi.Pointer<ffi.UnsignedShort> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Size, ffi.Size,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, int, int, int)>();

  int acct(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _acct(
      __name,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  int chroot(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chroot(
      __path,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> __prompt,
  ) {
    return _getpass(
      __prompt,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int fsync(
    int __fd,
  ) {
    return _fsync(
      __fd,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> __file,
    int __length,
  ) {
    return _truncate(
      __file,
      __length,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, __off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ftruncate(
    int __fd,
    int __length,
  ) {
    return _ftruncate(
      __fd,
      __length,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    return _brk(
      __addr,
    );
  }

  late final _brkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'brk');
  late final _brk = _brkPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    return _sbrk(
      __delta,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int __sysno,
  ) {
    return _syscall(
      __sysno,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, __off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int fdatasync(
    int __fildes,
  ) {
    return _fdatasync(
      __fildes,
    );
  }

  late final _fdatasyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fdatasync');
  late final _fdatasync = _fdatasyncPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> __key,
    ffi.Pointer<ffi.Char> __salt,
  ) {
    return _crypt(
      __key,
      __salt,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    return _getentropy(
      __buffer,
      __length,
    );
  }

  late final _getentropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('getentropy');
  late final _getentropy =
      _getentropyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int fcntl(
    int __fd,
    int __cmd,
  ) {
    return _fcntl(
      __fd,
      __cmd,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int open(
    ffi.Pointer<ffi.Char> __file,
    int __oflag,
  ) {
    return _open(
      __file,
      __oflag,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int openat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __oflag,
  ) {
    return _openat(
      __fd,
      __file,
      __oflag,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('openat');
  late final _openat =
      _openatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int creat(
    ffi.Pointer<ffi.Char> __file,
    int __mode,
  ) {
    return _creat(
      __file,
      __mode,
    );
  }

  late final _creatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int posix_fadvise(
    int __fd,
    int __offset,
    int __len,
    int __advise,
  ) {
    return _posix_fadvise(
      __fd,
      __offset,
      __len,
      __advise,
    );
  }

  late final _posix_fadvisePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t, off_t, ffi.Int)>>(
      'posix_fadvise');
  late final _posix_fadvise =
      _posix_fadvisePtr.asFunction<int Function(int, int, int, int)>();

  int posix_fallocate(
    int __fd,
    int __offset,
    int __len,
  ) {
    return _posix_fallocate(
      __fd,
      __offset,
      __len,
    );
  }

  late final _posix_fallocatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t, off_t)>>(
          'posix_fallocate');
  late final _posix_fallocate =
      _posix_fallocatePtr.asFunction<int Function(int, int, int)>();

  ffi.Pointer<ffi.Int> __errno_location() {
    return ___errno_location();
  }

  late final ___errno_locationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__errno_location');
  late final ___errno_location =
      ___errno_locationPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('__memcmpeq');
  late final ___memcmpeq = ___memcmpeqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit1(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  void closelog() {
    return _closelog();
  }

  late final _closelogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('closelog');
  late final _closelog = _closelogPtr.asFunction<void Function()>();

  void openlog(
    ffi.Pointer<ffi.Char> __ident,
    int __option,
    int __facility,
  ) {
    return _openlog(
      __ident,
      __option,
      __facility,
    );
  }

  late final _openlogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('openlog');
  late final _openlog =
      _openlogPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int, int)>();

  int setlogmask(
    int __mask,
  ) {
    return _setlogmask(
      __mask,
    );
  }

  late final _setlogmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('setlogmask');
  late final _setlogmask = _setlogmaskPtr.asFunction<int Function(int)>();

  void syslog(
    int __pri,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _syslog(
      __pri,
      __fmt,
    );
  }

  late final _syslogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('syslog');
  late final _syslog =
      _syslogPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void vsyslog(
    int __pri,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __ap,
  ) {
    return _vsyslog(
      __pri,
      __fmt,
      __ap,
    );
  }

  late final _vsyslogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsyslog');
  late final _vsyslog = _vsyslogPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  /// The most significant bit 31 (sign bit actually) is left unused,
  /// so that all people who check the value for < 0 instead of -1
  /// still get what they want. The bit 30 is reserved for marking
  /// the "socket group". Most of the API functions should work
  /// transparently with the socket descriptor designating a single
  /// socket or a socket group.
  late final ffi.Pointer<ffi.Int32> _SRTGROUP_MASK =
      _lookup<ffi.Int32>('SRTGROUP_MASK');

  int get SRTGROUP_MASK => _SRTGROUP_MASK.value;

  /// = 188*7, recommended for MPEG TS
  late final ffi.Pointer<ffi.Int> _SRT_LIVE_DEF_PLSIZE =
      _lookup<ffi.Int>('SRT_LIVE_DEF_PLSIZE');

  int get SRT_LIVE_DEF_PLSIZE => _SRT_LIVE_DEF_PLSIZE.value;

  /// MTU(1500) - UDP.hdr(28) - SRT.hdr(16)
  late final ffi.Pointer<ffi.Int> _SRT_LIVE_MAX_PLSIZE =
      _lookup<ffi.Int>('SRT_LIVE_MAX_PLSIZE');

  int get SRT_LIVE_MAX_PLSIZE => _SRT_LIVE_MAX_PLSIZE.value;

  /// Latency for Live transmission: default is 120
  late final ffi.Pointer<ffi.Int> _SRT_LIVE_DEF_LATENCY_MS =
      _lookup<ffi.Int>('SRT_LIVE_DEF_LATENCY_MS');

  int get SRT_LIVE_DEF_LATENCY_MS => _SRT_LIVE_DEF_LATENCY_MS.value;

  late final ffi.Pointer<SRTSOCKET> _SRT_INVALID_SOCK =
      _lookup<SRTSOCKET>('SRT_INVALID_SOCK');

  int get SRT_INVALID_SOCK => _SRT_INVALID_SOCK.value;

  late final ffi.Pointer<ffi.Int> _SRT_ERROR = _lookup<ffi.Int>('SRT_ERROR');

  int get SRT_ERROR => _SRT_ERROR.value;

  /// library initialization
  int srt_startup() {
    return _srt_startup();
  }

  late final _srt_startupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('srt_startup');
  late final _srt_startup = _srt_startupPtr.asFunction<int Function()>();

  int srt_cleanup() {
    return _srt_cleanup();
  }

  late final _srt_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('srt_cleanup');
  late final _srt_cleanup = _srt_cleanupPtr.asFunction<int Function()>();

  /// Socket operations
  ///
  /// DEPRECATED: srt_socket with 3 arguments. All these arguments are ignored
  /// and socket creation doesn't need any arguments. Use srt_create_socket().
  /// Planned deprecation removal: rel1.6.0
  int srt_socket(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _srt_socket(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _srt_socketPtr = _lookup<
          ffi.NativeFunction<SRTSOCKET Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'srt_socket');
  late final _srt_socket =
      _srt_socketPtr.asFunction<int Function(int, int, int)>();

  int srt_create_socket() {
    return _srt_create_socket();
  }

  late final _srt_create_socketPtr =
      _lookup<ffi.NativeFunction<SRTSOCKET Function()>>('srt_create_socket');
  late final _srt_create_socket =
      _srt_create_socketPtr.asFunction<int Function()>();

  int srt_bind(
    int u,
    ffi.Pointer<sockaddr> name,
    int namelen,
  ) {
    return _srt_bind(
      u,
      name,
      namelen,
    );
  }

  late final _srt_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              SRTSOCKET, ffi.Pointer<sockaddr>, ffi.Int)>>('srt_bind');
  late final _srt_bind =
      _srt_bindPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int srt_bind_acquire(
    int u,
    int sys_udp_sock,
  ) {
    return _srt_bind_acquire(
      u,
      sys_udp_sock,
    );
  }

  late final _srt_bind_acquirePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(SRTSOCKET, UDPSOCKET)>>(
          'srt_bind_acquire');
  late final _srt_bind_acquire =
      _srt_bind_acquirePtr.asFunction<int Function(int, int)>();

  int srt_listen(
    int u,
    int backlog,
  ) {
    return _srt_listen(
      u,
      backlog,
    );
  }

  late final _srt_listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(SRTSOCKET, ffi.Int)>>(
          'srt_listen');
  late final _srt_listen = _srt_listenPtr.asFunction<int Function(int, int)>();

  int srt_accept(
    int u,
    ffi.Pointer<sockaddr> addr,
    ffi.Pointer<ffi.Int> addrlen,
  ) {
    return _srt_accept(
      u,
      addr,
      addrlen,
    );
  }

  late final _srt_acceptPtr = _lookup<
      ffi.NativeFunction<
          SRTSOCKET Function(SRTSOCKET, ffi.Pointer<sockaddr>,
              ffi.Pointer<ffi.Int>)>>('srt_accept');
  late final _srt_accept = _srt_acceptPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>();

  int srt_accept_bond(
    ffi.Pointer<SRTSOCKET> listeners,
    int lsize,
    int msTimeOut,
  ) {
    return _srt_accept_bond(
      listeners,
      lsize,
      msTimeOut,
    );
  }

  late final _srt_accept_bondPtr = _lookup<
      ffi.NativeFunction<
          SRTSOCKET Function(
              ffi.Pointer<SRTSOCKET>, ffi.Int, ffi.Int64)>>('srt_accept_bond');
  late final _srt_accept_bond = _srt_accept_bondPtr
      .asFunction<int Function(ffi.Pointer<SRTSOCKET>, int, int)>();

  int srt_listen_callback(
    int lsn,
    ffi.Pointer<srt_listen_callback_fn> hook_fn,
    ffi.Pointer<ffi.Void> hook_opaque,
  ) {
    return _srt_listen_callback(
      lsn,
      hook_fn,
      hook_opaque,
    );
  }

  late final _srt_listen_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<srt_listen_callback_fn>,
              ffi.Pointer<ffi.Void>)>>('srt_listen_callback');
  late final _srt_listen_callback = _srt_listen_callbackPtr.asFunction<
      int Function(
          int, ffi.Pointer<srt_listen_callback_fn>, ffi.Pointer<ffi.Void>)>();

  int srt_connect_callback(
    int clr,
    ffi.Pointer<srt_connect_callback_fn> hook_fn,
    ffi.Pointer<ffi.Void> hook_opaque,
  ) {
    return _srt_connect_callback(
      clr,
      hook_fn,
      hook_opaque,
    );
  }

  late final _srt_connect_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<srt_connect_callback_fn>,
              ffi.Pointer<ffi.Void>)>>('srt_connect_callback');
  late final _srt_connect_callback = _srt_connect_callbackPtr.asFunction<
      int Function(
          int, ffi.Pointer<srt_connect_callback_fn>, ffi.Pointer<ffi.Void>)>();

  int srt_connect(
    int u,
    ffi.Pointer<sockaddr> name,
    int namelen,
  ) {
    return _srt_connect(
      u,
      name,
      namelen,
    );
  }

  late final _srt_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              SRTSOCKET, ffi.Pointer<sockaddr>, ffi.Int)>>('srt_connect');
  late final _srt_connect = _srt_connectPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int srt_connect_debug(
    int u,
    ffi.Pointer<sockaddr> name,
    int namelen,
    int forced_isn,
  ) {
    return _srt_connect_debug(
      u,
      name,
      namelen,
      forced_isn,
    );
  }

  late final _srt_connect_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<sockaddr>, ffi.Int,
              ffi.Int)>>('srt_connect_debug');
  late final _srt_connect_debug = _srt_connect_debugPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr>, int, int)>();

  int srt_connect_bind(
    int u,
    ffi.Pointer<sockaddr> source,
    ffi.Pointer<sockaddr> target,
    int len,
  ) {
    return _srt_connect_bind(
      u,
      source,
      target,
      len,
    );
  }

  late final _srt_connect_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<sockaddr>,
              ffi.Pointer<sockaddr>, ffi.Int)>>('srt_connect_bind');
  late final _srt_connect_bind = _srt_connect_bindPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<sockaddr>, int)>();

  int srt_rendezvous(
    int u,
    ffi.Pointer<sockaddr> local_name,
    int local_namelen,
    ffi.Pointer<sockaddr> remote_name,
    int remote_namelen,
  ) {
    return _srt_rendezvous(
      u,
      local_name,
      local_namelen,
      remote_name,
      remote_namelen,
    );
  }

  late final _srt_rendezvousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<sockaddr>, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Int)>>('srt_rendezvous');
  late final _srt_rendezvous = _srt_rendezvousPtr.asFunction<
      int Function(
          int, ffi.Pointer<sockaddr>, int, ffi.Pointer<sockaddr>, int)>();

  int srt_close(
    int u,
  ) {
    return _srt_close(
      u,
    );
  }

  late final _srt_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(SRTSOCKET)>>('srt_close');
  late final _srt_close = _srt_closePtr.asFunction<int Function(int)>();

  int srt_getpeername(
    int u,
    ffi.Pointer<sockaddr> name,
    ffi.Pointer<ffi.Int> namelen,
  ) {
    return _srt_getpeername(
      u,
      name,
      namelen,
    );
  }

  late final _srt_getpeernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<sockaddr>,
              ffi.Pointer<ffi.Int>)>>('srt_getpeername');
  late final _srt_getpeername = _srt_getpeernamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>();

  int srt_getsockname(
    int u,
    ffi.Pointer<sockaddr> name,
    ffi.Pointer<ffi.Int> namelen,
  ) {
    return _srt_getsockname(
      u,
      name,
      namelen,
    );
  }

  late final _srt_getsocknamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<sockaddr>,
              ffi.Pointer<ffi.Int>)>>('srt_getsockname');
  late final _srt_getsockname = _srt_getsocknamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>();

  int srt_getsockopt(
    int u,
    int level,
    int optname,
    ffi.Pointer<ffi.Void> optval,
    ffi.Pointer<ffi.Int> optlen,
  ) {
    return _srt_getsockopt(
      u,
      level,
      optname,
      optval,
      optlen,
    );
  }

  late final _srt_getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Int, ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('srt_getsockopt');
  late final _srt_getsockopt = _srt_getsockoptPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int srt_setsockopt(
    int u,
    int level,
    int optname,
    ffi.Pointer<ffi.Void> optval,
    int optlen,
  ) {
    return _srt_setsockopt(
      u,
      level,
      optname,
      optval,
      optlen,
    );
  }

  late final _srt_setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Int, ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('srt_setsockopt');
  late final _srt_setsockopt = _srt_setsockoptPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int srt_getsockflag(
    int u,
    int opt,
    ffi.Pointer<ffi.Void> optval,
    ffi.Pointer<ffi.Int> optlen,
  ) {
    return _srt_getsockflag(
      u,
      opt,
      optval,
      optlen,
    );
  }

  late final _srt_getsockflagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('srt_getsockflag');
  late final _srt_getsockflag = _srt_getsockflagPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int srt_setsockflag(
    int u,
    int opt,
    ffi.Pointer<ffi.Void> optval,
    int optlen,
  ) {
    return _srt_setsockflag(
      u,
      opt,
      optval,
      optlen,
    );
  }

  late final _srt_setsockflagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('srt_setsockflag');
  late final _srt_setsockflag = _srt_setsockflagPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  /// -1: no seq (0 is a valid seqno!)
  late final ffi.Pointer<ffi.Int32> _SRT_SEQNO_NONE =
      _lookup<ffi.Int32>('SRT_SEQNO_NONE');

  int get SRT_SEQNO_NONE => _SRT_SEQNO_NONE.value;

  /// -1: unset
  late final ffi.Pointer<ffi.Int32> _SRT_MSGNO_NONE =
      _lookup<ffi.Int32>('SRT_MSGNO_NONE');

  int get SRT_MSGNO_NONE => _SRT_MSGNO_NONE.value;

  /// 0: control (used by packet filter)
  late final ffi.Pointer<ffi.Int32> _SRT_MSGNO_CONTROL =
      _lookup<ffi.Int32>('SRT_MSGNO_CONTROL');

  int get SRT_MSGNO_CONTROL => _SRT_MSGNO_CONTROL.value;

  /// unlimited TTL specification for message TTL
  late final ffi.Pointer<ffi.Int> _SRT_MSGTTL_INF =
      _lookup<ffi.Int>('SRT_MSGTTL_INF');

  int get SRT_MSGTTL_INF => _SRT_MSGTTL_INF.value;

  /// You are free to use either of these two methods to set SRT_MSGCTRL object
  /// to default values: either call srt_msgctrl_init(&obj) or obj = srt_msgctrl_default.
  void srt_msgctrl_init(
    ffi.Pointer<SRT_MSGCTRL> mctrl,
  ) {
    return _srt_msgctrl_init(
      mctrl,
    );
  }

  late final _srt_msgctrl_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SRT_MSGCTRL>)>>(
          'srt_msgctrl_init');
  late final _srt_msgctrl_init = _srt_msgctrl_initPtr
      .asFunction<void Function(ffi.Pointer<SRT_MSGCTRL>)>();

  late final ffi.Pointer<SRT_MSGCTRL> _srt_msgctrl_default =
      _lookup<SRT_MSGCTRL>('srt_msgctrl_default');

  SRT_MSGCTRL get srt_msgctrl_default => _srt_msgctrl_default.ref;

  /// Sending functions
  int srt_send(
    int u,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _srt_send(
      u,
      buf,
      len,
    );
  }

  late final _srt_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              SRTSOCKET, ffi.Pointer<ffi.Char>, ffi.Int)>>('srt_send');
  late final _srt_send =
      _srt_sendPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int srt_sendmsg(
    int u,
    ffi.Pointer<ffi.Char> buf,
    int len,
    int ttl,
    int inorder,
  ) {
    return _srt_sendmsg(
      u,
      buf,
      len,
      ttl,
      inorder,
    );
  }

  late final _srt_sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('srt_sendmsg');
  late final _srt_sendmsg = _srt_sendmsgPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int srt_sendmsg2(
    int u,
    ffi.Pointer<ffi.Char> buf,
    int len,
    ffi.Pointer<SRT_MSGCTRL> mctrl,
  ) {
    return _srt_sendmsg2(
      u,
      buf,
      len,
      mctrl,
    );
  }

  late final _srt_sendmsg2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<SRT_MSGCTRL>)>>('srt_sendmsg2');
  late final _srt_sendmsg2 = _srt_sendmsg2Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<SRT_MSGCTRL>)>();

  /// Receiving functions
  int srt_recv(
    int u,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _srt_recv(
      u,
      buf,
      len,
    );
  }

  late final _srt_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              SRTSOCKET, ffi.Pointer<ffi.Char>, ffi.Int)>>('srt_recv');
  late final _srt_recv =
      _srt_recvPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  /// srt_recvmsg is actually an alias to srt_recv, it stays under the old name for compat reasons.
  int srt_recvmsg(
    int u,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _srt_recvmsg(
      u,
      buf,
      len,
    );
  }

  late final _srt_recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              SRTSOCKET, ffi.Pointer<ffi.Char>, ffi.Int)>>('srt_recvmsg');
  late final _srt_recvmsg = _srt_recvmsgPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int srt_recvmsg2(
    int u,
    ffi.Pointer<ffi.Char> buf,
    int len,
    ffi.Pointer<SRT_MSGCTRL> mctrl,
  ) {
    return _srt_recvmsg2(
      u,
      buf,
      len,
      mctrl,
    );
  }

  late final _srt_recvmsg2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<SRT_MSGCTRL>)>>('srt_recvmsg2');
  late final _srt_recvmsg2 = _srt_recvmsg2Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<SRT_MSGCTRL>)>();

  int srt_sendfile(
    int u,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Int64> offset,
    int size,
    int block,
  ) {
    return _srt_sendfile(
      u,
      path,
      offset,
      size,
      block,
    );
  }

  late final _srt_sendfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(SRTSOCKET, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int64>, ffi.Int64, ffi.Int)>>('srt_sendfile');
  late final _srt_sendfile = _srt_sendfilePtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int64>, int, int)>();

  int srt_recvfile(
    int u,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Int64> offset,
    int size,
    int block,
  ) {
    return _srt_recvfile(
      u,
      path,
      offset,
      size,
      block,
    );
  }

  late final _srt_recvfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(SRTSOCKET, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int64>, ffi.Int64, ffi.Int)>>('srt_recvfile');
  late final _srt_recvfile = _srt_recvfilePtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int64>, int, int)>();

  /// last error detection
  ffi.Pointer<ffi.Char> srt_getlasterror_str() {
    return _srt_getlasterror_str();
  }

  late final _srt_getlasterror_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'srt_getlasterror_str');
  late final _srt_getlasterror_str =
      _srt_getlasterror_strPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int srt_getlasterror(
    ffi.Pointer<ffi.Int> errno_loc,
  ) {
    return _srt_getlasterror(
      errno_loc,
    );
  }

  late final _srt_getlasterrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'srt_getlasterror');
  late final _srt_getlasterror =
      _srt_getlasterrorPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> srt_strerror(
    int code,
    int errnoval,
  ) {
    return _srt_strerror(
      code,
      errnoval,
    );
  }

  late final _srt_strerrorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Int)>>(
      'srt_strerror');
  late final _srt_strerror =
      _srt_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  void srt_clearlasterror() {
    return _srt_clearlasterror();
  }

  late final _srt_clearlasterrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srt_clearlasterror');
  late final _srt_clearlasterror =
      _srt_clearlasterrorPtr.asFunction<void Function()>();

  /// Performance tracking
  /// Performance monitor with Byte counters for better bitrate estimation.
  int srt_bstats(
    int u,
    ffi.Pointer<SRT_TRACEBSTATS> perf,
    int clear,
  ) {
    return _srt_bstats(
      u,
      perf,
      clear,
    );
  }

  late final _srt_bstatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              SRTSOCKET, ffi.Pointer<SRT_TRACEBSTATS>, ffi.Int)>>('srt_bstats');
  late final _srt_bstats = _srt_bstatsPtr
      .asFunction<int Function(int, ffi.Pointer<SRT_TRACEBSTATS>, int)>();

  /// Performance monitor with Byte counters and instantaneous stats instead of moving averages for Snd/Rcvbuffer sizes.
  int srt_bistats(
    int u,
    ffi.Pointer<SRT_TRACEBSTATS> perf,
    int clear,
    int instantaneous,
  ) {
    return _srt_bistats(
      u,
      perf,
      clear,
      instantaneous,
    );
  }

  late final _srt_bistatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<SRT_TRACEBSTATS>, ffi.Int,
              ffi.Int)>>('srt_bistats');
  late final _srt_bistats = _srt_bistatsPtr
      .asFunction<int Function(int, ffi.Pointer<SRT_TRACEBSTATS>, int, int)>();

  /// Socket Status (for problem tracking)
  int srt_getsockstate(
    int u,
  ) {
    return _srt_getsockstate(
      u,
    );
  }

  late final _srt_getsockstatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SRTSOCKET)>>(
          'srt_getsockstate');
  late final _srt_getsockstate =
      _srt_getsockstatePtr.asFunction<int Function(int)>();

  int srt_epoll_create() {
    return _srt_epoll_create();
  }

  late final _srt_epoll_createPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('srt_epoll_create');
  late final _srt_epoll_create =
      _srt_epoll_createPtr.asFunction<int Function()>();

  int srt_epoll_clear_usocks(
    int eid,
  ) {
    return _srt_epoll_clear_usocks(
      eid,
    );
  }

  late final _srt_epoll_clear_usocksPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'srt_epoll_clear_usocks');
  late final _srt_epoll_clear_usocks =
      _srt_epoll_clear_usocksPtr.asFunction<int Function(int)>();

  int srt_epoll_add_usock(
    int eid,
    int u,
    ffi.Pointer<ffi.Int> events,
  ) {
    return _srt_epoll_add_usock(
      eid,
      u,
      events,
    );
  }

  late final _srt_epoll_add_usockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, SRTSOCKET,
              ffi.Pointer<ffi.Int>)>>('srt_epoll_add_usock');
  late final _srt_epoll_add_usock = _srt_epoll_add_usockPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int>)>();

  int srt_epoll_add_ssock(
    int eid,
    int s,
    ffi.Pointer<ffi.Int> events,
  ) {
    return _srt_epoll_add_ssock(
      eid,
      s,
      events,
    );
  }

  late final _srt_epoll_add_ssockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, SYSSOCKET,
              ffi.Pointer<ffi.Int>)>>('srt_epoll_add_ssock');
  late final _srt_epoll_add_ssock = _srt_epoll_add_ssockPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int>)>();

  int srt_epoll_remove_usock(
    int eid,
    int u,
  ) {
    return _srt_epoll_remove_usock(
      eid,
      u,
    );
  }

  late final _srt_epoll_remove_usockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, SRTSOCKET)>>(
          'srt_epoll_remove_usock');
  late final _srt_epoll_remove_usock =
      _srt_epoll_remove_usockPtr.asFunction<int Function(int, int)>();

  int srt_epoll_remove_ssock(
    int eid,
    int s,
  ) {
    return _srt_epoll_remove_ssock(
      eid,
      s,
    );
  }

  late final _srt_epoll_remove_ssockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, SYSSOCKET)>>(
          'srt_epoll_remove_ssock');
  late final _srt_epoll_remove_ssock =
      _srt_epoll_remove_ssockPtr.asFunction<int Function(int, int)>();

  int srt_epoll_update_usock(
    int eid,
    int u,
    ffi.Pointer<ffi.Int> events,
  ) {
    return _srt_epoll_update_usock(
      eid,
      u,
      events,
    );
  }

  late final _srt_epoll_update_usockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, SRTSOCKET,
              ffi.Pointer<ffi.Int>)>>('srt_epoll_update_usock');
  late final _srt_epoll_update_usock = _srt_epoll_update_usockPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int>)>();

  int srt_epoll_update_ssock(
    int eid,
    int s,
    ffi.Pointer<ffi.Int> events,
  ) {
    return _srt_epoll_update_ssock(
      eid,
      s,
      events,
    );
  }

  late final _srt_epoll_update_ssockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, SYSSOCKET,
              ffi.Pointer<ffi.Int>)>>('srt_epoll_update_ssock');
  late final _srt_epoll_update_ssock = _srt_epoll_update_ssockPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int>)>();

  int srt_epoll_wait(
    int eid,
    ffi.Pointer<SRTSOCKET> readfds,
    ffi.Pointer<ffi.Int> rnum,
    ffi.Pointer<SRTSOCKET> writefds,
    ffi.Pointer<ffi.Int> wnum,
    int msTimeOut,
    ffi.Pointer<SYSSOCKET> lrfds,
    ffi.Pointer<ffi.Int> lrnum,
    ffi.Pointer<SYSSOCKET> lwfds,
    ffi.Pointer<ffi.Int> lwnum,
  ) {
    return _srt_epoll_wait(
      eid,
      readfds,
      rnum,
      writefds,
      wnum,
      msTimeOut,
      lrfds,
      lrnum,
      lwfds,
      lwnum,
    );
  }

  late final _srt_epoll_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<SRTSOCKET>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<SRTSOCKET>,
              ffi.Pointer<ffi.Int>,
              ffi.Int64,
              ffi.Pointer<SYSSOCKET>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<SYSSOCKET>,
              ffi.Pointer<ffi.Int>)>>('srt_epoll_wait');
  late final _srt_epoll_wait = _srt_epoll_waitPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<SRTSOCKET>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<SRTSOCKET>,
          ffi.Pointer<ffi.Int>,
          int,
          ffi.Pointer<SYSSOCKET>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<SYSSOCKET>,
          ffi.Pointer<ffi.Int>)>();

  int srt_epoll_uwait(
    int eid,
    ffi.Pointer<SRT_EPOLL_EVENT> fdsSet,
    int fdsSize,
    int msTimeOut,
  ) {
    return _srt_epoll_uwait(
      eid,
      fdsSet,
      fdsSize,
      msTimeOut,
    );
  }

  late final _srt_epoll_uwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<SRT_EPOLL_EVENT>, ffi.Int,
              ffi.Int64)>>('srt_epoll_uwait');
  late final _srt_epoll_uwait = _srt_epoll_uwaitPtr
      .asFunction<int Function(int, ffi.Pointer<SRT_EPOLL_EVENT>, int, int)>();

  int srt_epoll_set(
    int eid,
    int flags,
  ) {
    return _srt_epoll_set(
      eid,
      flags,
    );
  }

  late final _srt_epoll_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int, ffi.Int32)>>(
          'srt_epoll_set');
  late final _srt_epoll_set =
      _srt_epoll_setPtr.asFunction<int Function(int, int)>();

  int srt_epoll_release(
    int eid,
  ) {
    return _srt_epoll_release(
      eid,
    );
  }

  late final _srt_epoll_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'srt_epoll_release');
  late final _srt_epoll_release =
      _srt_epoll_releasePtr.asFunction<int Function(int)>();

  /// Logging control
  void srt_setloglevel(
    int ll,
  ) {
    return _srt_setloglevel(
      ll,
    );
  }

  late final _srt_setloglevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'srt_setloglevel');
  late final _srt_setloglevel =
      _srt_setloglevelPtr.asFunction<void Function(int)>();

  void srt_addlogfa(
    int fa,
  ) {
    return _srt_addlogfa(
      fa,
    );
  }

  late final _srt_addlogfaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('srt_addlogfa');
  late final _srt_addlogfa = _srt_addlogfaPtr.asFunction<void Function(int)>();

  void srt_dellogfa(
    int fa,
  ) {
    return _srt_dellogfa(
      fa,
    );
  }

  late final _srt_dellogfaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('srt_dellogfa');
  late final _srt_dellogfa = _srt_dellogfaPtr.asFunction<void Function(int)>();

  void srt_resetlogfa(
    ffi.Pointer<ffi.Int> fara,
    int fara_size,
  ) {
    return _srt_resetlogfa(
      fara,
      fara_size,
    );
  }

  late final _srt_resetlogfaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Size)>>('srt_resetlogfa');
  late final _srt_resetlogfa =
      _srt_resetlogfaPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  /// This isn't predicted, will be only available in SRT C++ API.
  /// For the time being, until this API is ready, use UDT::setlogstream.
  /// SRT_API void srt_setlogstream(std::ostream& stream);
  void srt_setloghandler(
    ffi.Pointer<ffi.Void> opaque,
    ffi.Pointer<SRT_LOG_HANDLER_FN> handler,
  ) {
    return _srt_setloghandler(
      opaque,
      handler,
    );
  }

  late final _srt_setloghandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<SRT_LOG_HANDLER_FN>)>>('srt_setloghandler');
  late final _srt_setloghandler = _srt_setloghandlerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<SRT_LOG_HANDLER_FN>)>();

  void srt_setlogflags(
    int flags,
  ) {
    return _srt_setlogflags(
      flags,
    );
  }

  late final _srt_setlogflagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'srt_setlogflags');
  late final _srt_setlogflags =
      _srt_setlogflagsPtr.asFunction<void Function(int)>();

  int srt_getsndbuffer(
    int sock,
    ffi.Pointer<ffi.Size> blocks,
    ffi.Pointer<ffi.Size> bytes,
  ) {
    return _srt_getsndbuffer(
      sock,
      blocks,
      bytes,
    );
  }

  late final _srt_getsndbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('srt_getsndbuffer');
  late final _srt_getsndbuffer = _srt_getsndbufferPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Size>)>();

  int srt_getrejectreason(
    int sock,
  ) {
    return _srt_getrejectreason(
      sock,
    );
  }

  late final _srt_getrejectreasonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(SRTSOCKET)>>(
          'srt_getrejectreason');
  late final _srt_getrejectreason =
      _srt_getrejectreasonPtr.asFunction<int Function(int)>();

  int srt_setrejectreason(
    int sock,
    int value,
  ) {
    return _srt_setrejectreason(
      sock,
      value,
    );
  }

  late final _srt_setrejectreasonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(SRTSOCKET, ffi.Int)>>(
          'srt_setrejectreason');
  late final _srt_setrejectreason =
      _srt_setrejectreasonPtr.asFunction<int Function(int, int)>();

  /// The srt_rejectreason_msg[] array is deprecated (as unsafe).
  /// Planned removal: v1.6.0.
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
      _srt_rejectreason_msg =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('srt_rejectreason_msg');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get srt_rejectreason_msg =>
      _srt_rejectreason_msg.value;

  set srt_rejectreason_msg(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _srt_rejectreason_msg.value = value;

  ffi.Pointer<ffi.Char> srt_rejectreason_str(
    int id,
  ) {
    return _srt_rejectreason_str(
      id,
    );
  }

  late final _srt_rejectreason_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'srt_rejectreason_str');
  late final _srt_rejectreason_str = _srt_rejectreason_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int srt_getversion() {
    return _srt_getversion();
  }

  late final _srt_getversionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('srt_getversion');
  late final _srt_getversion = _srt_getversionPtr.asFunction<int Function()>();

  int srt_time_now() {
    return _srt_time_now();
  }

  late final _srt_time_nowPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('srt_time_now');
  late final _srt_time_now = _srt_time_nowPtr.asFunction<int Function()>();

  int srt_connection_time(
    int sock,
  ) {
    return _srt_connection_time(
      sock,
    );
  }

  late final _srt_connection_timePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(SRTSOCKET)>>(
          'srt_connection_time');
  late final _srt_connection_time =
      _srt_connection_timePtr.asFunction<int Function(int)>();

  int srt_clock_type() {
    return _srt_clock_type();
  }

  late final _srt_clock_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('srt_clock_type');
  late final _srt_clock_type = _srt_clock_typePtr.asFunction<int Function()>();

  /// Free-form flags for groups
  /// Flags may be type-specific!
  late final ffi.Pointer<ffi.Uint32> _SRT_GFLAG_SYNCONMSG =
      _lookup<ffi.Uint32>('SRT_GFLAG_SYNCONMSG');

  int get SRT_GFLAG_SYNCONMSG => _SRT_GFLAG_SYNCONMSG.value;

  int srt_create_group(
    int arg0,
  ) {
    return _srt_create_group(
      arg0,
    );
  }

  late final _srt_create_groupPtr =
      _lookup<ffi.NativeFunction<SRTSOCKET Function(ffi.Int32)>>(
          'srt_create_group');
  late final _srt_create_group =
      _srt_create_groupPtr.asFunction<int Function(int)>();

  int srt_groupof(
    int socket,
  ) {
    return _srt_groupof(
      socket,
    );
  }

  late final _srt_groupofPtr =
      _lookup<ffi.NativeFunction<SRTSOCKET Function(SRTSOCKET)>>('srt_groupof');
  late final _srt_groupof = _srt_groupofPtr.asFunction<int Function(int)>();

  int srt_group_data(
    int socketgroup,
    ffi.Pointer<SRT_SOCKGROUPDATA> output,
    ffi.Pointer<ffi.Size> inoutlen,
  ) {
    return _srt_group_data(
      socketgroup,
      output,
      inoutlen,
    );
  }

  late final _srt_group_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<SRT_SOCKGROUPDATA>,
              ffi.Pointer<ffi.Size>)>>('srt_group_data');
  late final _srt_group_data = _srt_group_dataPtr.asFunction<
      int Function(
          int, ffi.Pointer<SRT_SOCKGROUPDATA>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<SRT_SOCKOPT_CONFIG> srt_create_config() {
    return _srt_create_config();
  }

  late final _srt_create_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SRT_SOCKOPT_CONFIG> Function()>>(
          'srt_create_config');
  late final _srt_create_config = _srt_create_configPtr
      .asFunction<ffi.Pointer<SRT_SOCKOPT_CONFIG> Function()>();

  void srt_delete_config(
    ffi.Pointer<SRT_SOCKOPT_CONFIG> config,
  ) {
    return _srt_delete_config(
      config,
    );
  }

  late final _srt_delete_configPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<SRT_SOCKOPT_CONFIG>)>>(
      'srt_delete_config');
  late final _srt_delete_config = _srt_delete_configPtr
      .asFunction<void Function(ffi.Pointer<SRT_SOCKOPT_CONFIG>)>();

  int srt_config_add(
    ffi.Pointer<SRT_SOCKOPT_CONFIG> config,
    int option,
    ffi.Pointer<ffi.Void> contents,
    int len,
  ) {
    return _srt_config_add(
      config,
      option,
      contents,
      len,
    );
  }

  late final _srt_config_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SRT_SOCKOPT_CONFIG>, ffi.Int32,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('srt_config_add');
  late final _srt_config_add = _srt_config_addPtr.asFunction<
      int Function(
          ffi.Pointer<SRT_SOCKOPT_CONFIG>, int, ffi.Pointer<ffi.Void>, int)>();

  SRT_SOCKGROUPCONFIG srt_prepare_endpoint(
    ffi.Pointer<sockaddr> src,
    ffi.Pointer<sockaddr> adr,
    int namelen,
  ) {
    return _srt_prepare_endpoint(
      src,
      adr,
      namelen,
    );
  }

  late final _srt_prepare_endpointPtr = _lookup<
      ffi.NativeFunction<
          SRT_SOCKGROUPCONFIG Function(ffi.Pointer<sockaddr>,
              ffi.Pointer<sockaddr>, ffi.Int)>>('srt_prepare_endpoint');
  late final _srt_prepare_endpoint = _srt_prepare_endpointPtr.asFunction<
      SRT_SOCKGROUPCONFIG Function(
          ffi.Pointer<sockaddr>, ffi.Pointer<sockaddr>, int)>();

  int srt_connect_group(
    int group,
    ffi.Pointer<SRT_SOCKGROUPCONFIG> name,
    int arraysize,
  ) {
    return _srt_connect_group(
      group,
      name,
      arraysize,
    );
  }

  late final _srt_connect_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SRTSOCKET, ffi.Pointer<SRT_SOCKGROUPCONFIG>,
              ffi.Int)>>('srt_connect_group');
  late final _srt_connect_group = _srt_connect_groupPtr
      .asFunction<int Function(int, ffi.Pointer<SRT_SOCKGROUPCONFIG>, int)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Size()
  external int iov_len;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

final class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;
typedef Dartsa_family_t = int;

final class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

final class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Size()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Size()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

typedef socklen_t = __socklen_t;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;

final class cmsghdr extends ffi.Opaque {}

final class __kernel_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> fds_bits;
}

final class __kernel_fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> val;
}

final class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

final class osockaddr extends ffi.Struct {
  @ffi.UnsignedShort()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.UnsignedChar> sa_data;
}

typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;

final class winsize extends ffi.Struct {
  @ffi.UnsignedShort()
  external int ws_row;

  @ffi.UnsignedShort()
  external int ws_col;

  @ffi.UnsignedShort()
  external int ws_xpixel;

  @ffi.UnsignedShort()
  external int ws_ypixel;
}

final class termio extends ffi.Struct {
  @ffi.UnsignedShort()
  external int c_iflag;

  @ffi.UnsignedShort()
  external int c_oflag;

  @ffi.UnsignedShort()
  external int c_cflag;

  @ffi.UnsignedShort()
  external int c_lflag;

  @ffi.UnsignedChar()
  external int c_line;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> c_cc;
}

final class timezone extends ffi.Struct {
  @ffi.Int()
  external int tz_minuteswest;

  @ffi.Int()
  external int tz_dsttime;
}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

final class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

typedef __itimer_which_t = ffi.Int;
typedef Dart__itimer_which_t = int;

final class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;
typedef Dartin_addr_t = int;

final class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> ip_opts1;
}

final class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int()
  external int imr_ifindex;
}

final class in_pktinfo extends ffi.Struct {
  @ffi.Int()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

final class in6_addr extends ffi.Struct {
  external UnnamedUnion1 __in6_u;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

final class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> sin_zero;
}

typedef in_port_t = ffi.Uint16;
typedef Dartin_port_t = int;

final class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

final class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

final class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;

  external in_addr imr_sourceaddr;
}

final class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.UnsignedInt()
  external int ipv6mr_interface;
}

final class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

final class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

final class ip_msfilter extends ffi.Struct {
  external in_addr imsf_multiaddr;

  external in_addr imsf_interface;

  @ffi.Uint32()
  external int imsf_fmode;

  @ffi.Uint32()
  external int imsf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<in_addr> imsf_slist;
}

final class group_filter extends ffi.Struct {
  @ffi.Uint32()
  external int gf_interface;

  external sockaddr_storage gf_group;

  @ffi.Uint32()
  external int gf_fmode;

  @ffi.Uint32()
  external int gf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<sockaddr_storage> gf_slist;
}

final class rpcent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> r_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> r_aliases;

  @ffi.Int()
  external int r_number;
}

final class netent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> n_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> n_aliases;

  @ffi.Int()
  external int n_addrtype;

  @ffi.Uint32()
  external int n_net;
}

final class hostent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> h_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> h_aliases;

  @ffi.Int()
  external int h_addrtype;

  @ffi.Int()
  external int h_length;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> h_addr_list;
}

final class servent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> s_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> s_aliases;

  @ffi.Int()
  external int s_port;

  external ffi.Pointer<ffi.Char> s_proto;
}

final class protoent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> p_aliases;

  @ffi.Int()
  external int p_proto;
}

final class addrinfo extends ffi.Struct {
  @ffi.Int()
  external int ai_flags;

  @ffi.Int()
  external int ai_family;

  @ffi.Int()
  external int ai_socktype;

  @ffi.Int()
  external int ai_protocol;

  @socklen_t()
  external int ai_addrlen;

  external ffi.Pointer<sockaddr> ai_addr;

  external ffi.Pointer<ffi.Char> ai_canonname;

  external ffi.Pointer<addrinfo> ai_next;
}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class flock extends ffi.Struct {
  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;

  @__off_t()
  external int l_start;

  @__off_t()
  external int l_len;

  @__pid_t()
  external int l_pid;
}

final class stat extends ffi.Struct {
  @__dev_t()
  external int st_dev;

  @__ino_t()
  external int st_ino;

  @__nlink_t()
  external int st_nlink;

  @__mode_t()
  external int st_mode;

  @__uid_t()
  external int st_uid;

  @__gid_t()
  external int st_gid;

  @ffi.Int()
  external int __pad0;

  @__dev_t()
  external int st_rdev;

  @__off_t()
  external int st_size;

  @__blksize_t()
  external int st_blksize;

  @__blkcnt_t()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Array.multi([3])
  external ffi.Array<__syscall_slong_t> __glibc_reserved;
}

typedef __dev_t = ffi.UnsignedLong;
typedef Dart__dev_t = int;
typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __nlink_t = ffi.UnsignedLong;
typedef Dart__nlink_t = int;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;
typedef __blksize_t = ffi.Long;
typedef Dart__blksize_t = int;
typedef __blkcnt_t = ffi.Long;
typedef Dart__blkcnt_t = int;
typedef mode_t = __mode_t;
typedef off_t = __off_t;

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<ffi.NativeFunction<__compar_fn_tFunction>>;
typedef __compar_fn_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart__compar_fn_tFunction = int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// Values returned by srt_getsockstate()
abstract class SRT_SOCKSTATUS {
  static const int SRTS_INIT = 1;
  static const int SRTS_OPENED = 2;
  static const int SRTS_LISTENING = 3;
  static const int SRTS_CONNECTING = 4;
  static const int SRTS_CONNECTED = 5;
  static const int SRTS_BROKEN = 6;
  static const int SRTS_CLOSING = 7;
  static const int SRTS_CLOSED = 8;
  static const int SRTS_NONEXIST = 9;
}

/// This is a duplicate enum. Must be kept in sync with the original UDT enum for
/// backward compatibility until all compat is destroyed.
abstract class SRT_SOCKOPT {
  /// the Maximum Transfer Unit
  static const int SRTO_MSS = 0;

  /// if sending is blocking
  static const int SRTO_SNDSYN = 1;

  /// if receiving is blocking
  static const int SRTO_RCVSYN = 2;

  /// Initial Sequence Number (valid only after srt_connect or srt_accept-ed sockets)
  static const int SRTO_ISN = 3;

  /// Flight flag size (window size)
  static const int SRTO_FC = 4;

  /// maximum buffer in sending queue
  static const int SRTO_SNDBUF = 5;

  /// UDT receiving buffer size
  static const int SRTO_RCVBUF = 6;

  /// waiting for unsent data when closing
  static const int SRTO_LINGER = 7;

  /// UDP sending buffer size
  static const int SRTO_UDP_SNDBUF = 8;

  /// UDP receiving buffer size
  static const int SRTO_UDP_RCVBUF = 9;

  /// rendezvous connection mode
  static const int SRTO_RENDEZVOUS = 12;

  /// send() timeout
  static const int SRTO_SNDTIMEO = 13;

  /// recv() timeout
  static const int SRTO_RCVTIMEO = 14;

  /// reuse an existing port or create a new one
  static const int SRTO_REUSEADDR = 15;

  /// maximum bandwidth (bytes per second) that the connection can use
  static const int SRTO_MAXBW = 16;

  /// current socket state, see UDTSTATUS, read only
  static const int SRTO_STATE = 17;

  /// current available events associated with the socket
  static const int SRTO_EVENT = 18;

  /// size of data in the sending buffer
  static const int SRTO_SNDDATA = 19;

  /// size of data available for recv
  static const int SRTO_RCVDATA = 20;

  /// Sender mode (independent of conn mode), for encryption, tsbpd handshake.
  static const int SRTO_SENDER = 21;

  /// Enable/Disable TsbPd. Enable -> Tx set origin timestamp, Rx deliver packet at origin time + delay
  static const int SRTO_TSBPDMODE = 22;

  /// NOT RECOMMENDED. SET: to both SRTO_RCVLATENCY and SRTO_PEERLATENCY. GET: same as SRTO_RCVLATENCY.
  static const int SRTO_LATENCY = 23;

  /// Estimated input stream rate.
  static const int SRTO_INPUTBW = 24;

  /// MaxBW ceiling based on % over input stream rate. Applies when UDT_MAXBW=0 (auto).
  static const int SRTO_OHEADBW = 25;

  /// Crypto PBKDF2 Passphrase (must be 10..79 characters, or empty to disable encryption)
  static const int SRTO_PASSPHRASE = 26;

  /// Crypto key len in bytes {16,24,32} Default: 16 (AES-128)
  static const int SRTO_PBKEYLEN = 27;

  /// Key Material exchange status (UDT_SRTKmState)
  static const int SRTO_KMSTATE = 28;

  /// IP Time To Live (passthru for system sockopt IPPROTO_IP/IP_TTL)
  static const int SRTO_IPTTL = 29;

  /// IP Type of Service (passthru for system sockopt IPPROTO_IP/IP_TOS)
  static const int SRTO_IPTOS = 30;

  /// Enable receiver pkt drop
  static const int SRTO_TLPKTDROP = 31;

  /// Extra delay towards latency for sender TLPKTDROP decision (-1 to off)
  static const int SRTO_SNDDROPDELAY = 32;

  /// Enable receiver to send periodic NAK reports
  static const int SRTO_NAKREPORT = 33;

  /// Local SRT Version
  static const int SRTO_VERSION = 34;

  /// Peer SRT Version (from SRT Handshake)
  static const int SRTO_PEERVERSION = 35;

  /// Connect timeout in msec. Caller default: 3000, rendezvous (x 10)
  static const int SRTO_CONNTIMEO = 36;

  /// Enable or disable drift tracer
  static const int SRTO_DRIFTTRACER = 37;

  /// Minimum estimate of input stream rate.
  static const int SRTO_MININPUTBW = 38;

  /// (GET) the current state of the encryption at the peer side
  static const int SRTO_SNDKMSTATE = 40;

  /// (GET) the current state of the encryption at the agent side
  static const int SRTO_RCVKMSTATE = 41;

  /// Maximum possible packet reorder tolerance (number of packets to receive after loss to send lossreport)
  static const int SRTO_LOSSMAXTTL = 42;

  /// TsbPd receiver delay (mSec) to absorb burst of missed packet retransmission
  static const int SRTO_RCVLATENCY = 43;

  /// Minimum value of the TsbPd receiver delay (mSec) for the opposite side (peer)
  static const int SRTO_PEERLATENCY = 44;

  /// Minimum SRT version needed for the peer (peers with less version will get connection reject)
  static const int SRTO_MINVERSION = 45;

  /// A string set to a socket and passed to the listener's accepted socket
  static const int SRTO_STREAMID = 46;

  /// Congestion controller type selection
  static const int SRTO_CONGESTION = 47;

  /// In File mode, use message API (portions of data with boundaries)
  static const int SRTO_MESSAGEAPI = 48;

  /// Maximum payload size sent in one UDP packet (0 if unlimited)
  static const int SRTO_PAYLOADSIZE = 49;

  /// Transmission type (set of options required for given transmission type)
  static const int SRTO_TRANSTYPE = 50;

  /// After sending how many packets the encryption key should be flipped to the new key
  static const int SRTO_KMREFRESHRATE = 51;

  /// How many packets before key flip the new key is annnounced and after key flip the old one decommissioned
  static const int SRTO_KMPREANNOUNCE = 52;

  /// Connection to be rejected or quickly broken when one side encryption set or bad password
  static const int SRTO_ENFORCEDENCRYPTION = 53;

  /// IPV6_V6ONLY mode
  static const int SRTO_IPV6ONLY = 54;

  /// Peer-idle timeout (max time of silence heard from peer) in [ms]
  static const int SRTO_PEERIDLETIMEO = 55;

  /// Forward the SOL_SOCKET/SO_BINDTODEVICE option on socket (pass packets only from that device)
  static const int SRTO_BINDTODEVICE = 56;

  /// Set on a listener to allow group connection (ENABLE_BONDING)
  static const int SRTO_GROUPCONNECT = 57;

  /// Minimum Link Stability timeout (backup mode) in milliseconds (ENABLE_BONDING)
  static const int SRTO_GROUPMINSTABLETIMEO = 58;

  /// Group type to which an accepted socket is about to be added, available in the handshake (ENABLE_BONDING)
  static const int SRTO_GROUPTYPE = 59;

  /// Add and configure a packet filter
  static const int SRTO_PACKETFILTER = 60;

  /// An option to select packet retransmission algorithm
  static const int SRTO_RETRANSMITALGO = 61;

  /// Always last element, not a valid option.
  static const int SRTO_E_SIZE = 62;
}

/// deprecated enum labels are supported only since gcc 6, so in C there
/// will be a whole deprecated enum type, as it's not an error in C to mix
/// enum types
abstract class SRT_SOCKOPT_DEPRECATED {
  /// Dummy last option, as every entry ends with a comma
  static const int SRTO_DEPRECATED_END = 0;
}

/// Note that there are no deprecated options at the moment, but the mechanism
/// stays so that it can be used in future. Example:
/// #define SRTO_STRICTENC SRT_DEPRECATED_OPTION(53)
abstract class SRT_TRANSTYPE {
  static const int SRTT_LIVE = 0;
  static const int SRTT_FILE = 1;
  static const int SRTT_INVALID = 2;
}

/// Importrant note: please add new fields to this structure to the end and don't remove any existing fields
final class CBytePerfMon extends ffi.Struct {
  /// time since the UDT entity is started, in milliseconds
  @ffi.Int64()
  external int msTimeStamp;

  /// total number of sent data packets, including retransmissions
  @ffi.Int64()
  external int pktSentTotal;

  /// total number of received packets
  @ffi.Int64()
  external int pktRecvTotal;

  /// total number of lost packets (sender side)
  @ffi.Int()
  external int pktSndLossTotal;

  /// total number of lost packets (receiver side)
  @ffi.Int()
  external int pktRcvLossTotal;

  /// total number of retransmitted packets
  @ffi.Int()
  external int pktRetransTotal;

  /// total number of sent ACK packets
  @ffi.Int()
  external int pktSentACKTotal;

  /// total number of received ACK packets
  @ffi.Int()
  external int pktRecvACKTotal;

  /// total number of sent NAK packets
  @ffi.Int()
  external int pktSentNAKTotal;

  /// total number of received NAK packets
  @ffi.Int()
  external int pktRecvNAKTotal;

  /// total time duration when UDT is sending data (idle time exclusive)
  @ffi.Int64()
  external int usSndDurationTotal;

  /// number of too-late-to-send dropped packets
  @ffi.Int()
  external int pktSndDropTotal;

  /// number of too-late-to play missing packets
  @ffi.Int()
  external int pktRcvDropTotal;

  /// number of undecrypted packets
  @ffi.Int()
  external int pktRcvUndecryptTotal;

  /// total number of sent data bytes, including retransmissions
  @ffi.Uint64()
  external int byteSentTotal;

  /// total number of received bytes
  @ffi.Uint64()
  external int byteRecvTotal;

  /// total number of lost bytes
  @ffi.Uint64()
  external int byteRcvLossTotal;

  /// total number of retransmitted bytes
  @ffi.Uint64()
  external int byteRetransTotal;

  /// number of too-late-to-send dropped bytes
  @ffi.Uint64()
  external int byteSndDropTotal;

  /// number of too-late-to play missing bytes (estimate based on average packet size)
  @ffi.Uint64()
  external int byteRcvDropTotal;

  /// number of undecrypted bytes
  @ffi.Uint64()
  external int byteRcvUndecryptTotal;

  /// number of sent data packets, including retransmissions
  @ffi.Int64()
  external int pktSent;

  /// number of received packets
  @ffi.Int64()
  external int pktRecv;

  /// number of lost packets (sender side)
  @ffi.Int()
  external int pktSndLoss;

  /// number of lost packets (receiver side)
  @ffi.Int()
  external int pktRcvLoss;

  /// number of retransmitted packets
  @ffi.Int()
  external int pktRetrans;

  /// number of retransmitted packets received
  @ffi.Int()
  external int pktRcvRetrans;

  /// number of sent ACK packets
  @ffi.Int()
  external int pktSentACK;

  /// number of received ACK packets
  @ffi.Int()
  external int pktRecvACK;

  /// number of sent NAK packets
  @ffi.Int()
  external int pktSentNAK;

  /// number of received NAK packets
  @ffi.Int()
  external int pktRecvNAK;

  /// sending rate in Mb/s
  @ffi.Double()
  external double mbpsSendRate;

  /// receiving rate in Mb/s
  @ffi.Double()
  external double mbpsRecvRate;

  /// busy sending time (i.e., idle time exclusive)
  @ffi.Int64()
  external int usSndDuration;

  /// size of order discrepancy in received sequences
  @ffi.Int()
  external int pktReorderDistance;

  /// average time of packet delay for belated packets (packets with sequence past the ACK)
  @ffi.Double()
  external double pktRcvAvgBelatedTime;

  /// number of received AND IGNORED packets due to having come too late
  @ffi.Int64()
  external int pktRcvBelated;

  /// number of too-late-to-send dropped packets
  @ffi.Int()
  external int pktSndDrop;

  /// number of too-late-to play missing packets
  @ffi.Int()
  external int pktRcvDrop;

  /// number of undecrypted packets
  @ffi.Int()
  external int pktRcvUndecrypt;

  /// number of sent data bytes, including retransmissions
  @ffi.Uint64()
  external int byteSent;

  /// number of received bytes
  @ffi.Uint64()
  external int byteRecv;

  /// number of retransmitted bytes
  @ffi.Uint64()
  external int byteRcvLoss;

  /// number of retransmitted bytes
  @ffi.Uint64()
  external int byteRetrans;

  /// number of too-late-to-send dropped bytes
  @ffi.Uint64()
  external int byteSndDrop;

  /// number of too-late-to play missing bytes (estimate based on average packet size)
  @ffi.Uint64()
  external int byteRcvDrop;

  /// number of undecrypted bytes
  @ffi.Uint64()
  external int byteRcvUndecrypt;

  /// packet sending period, in microseconds
  @ffi.Double()
  external double usPktSndPeriod;

  /// flow window size, in number of packets
  @ffi.Int()
  external int pktFlowWindow;

  /// congestion window size, in number of packets
  @ffi.Int()
  external int pktCongestionWindow;

  /// number of packets on flight
  @ffi.Int()
  external int pktFlightSize;

  /// RTT, in milliseconds
  @ffi.Double()
  external double msRTT;

  /// estimated bandwidth, in Mb/s
  @ffi.Double()
  external double mbpsBandwidth;

  /// available UDT sender buffer size
  @ffi.Int()
  external int byteAvailSndBuf;

  /// available UDT receiver buffer size
  @ffi.Int()
  external int byteAvailRcvBuf;

  /// Transmit Bandwidth ceiling (Mbps)
  @ffi.Double()
  external double mbpsMaxBW;

  /// MTU
  @ffi.Int()
  external int byteMSS;

  /// UnACKed packets in UDT sender
  @ffi.Int()
  external int pktSndBuf;

  /// UnACKed bytes in UDT sender
  @ffi.Int()
  external int byteSndBuf;

  /// UnACKed timespan (msec) of UDT sender
  @ffi.Int()
  external int msSndBuf;

  /// Timestamp-based Packet Delivery Delay
  @ffi.Int()
  external int msSndTsbPdDelay;

  /// Undelivered packets in UDT receiver
  @ffi.Int()
  external int pktRcvBuf;

  /// Undelivered bytes of UDT receiver
  @ffi.Int()
  external int byteRcvBuf;

  /// Undelivered timespan (msec) of UDT receiver
  @ffi.Int()
  external int msRcvBuf;

  /// Timestamp-based Packet Delivery Delay
  @ffi.Int()
  external int msRcvTsbPdDelay;

  /// number of control packets supplied by packet filter
  @ffi.Int()
  external int pktSndFilterExtraTotal;

  /// number of control packets received and not supplied back
  @ffi.Int()
  external int pktRcvFilterExtraTotal;

  /// number of packets that the filter supplied extra (e.g. FEC rebuilt)
  @ffi.Int()
  external int pktRcvFilterSupplyTotal;

  /// number of packet loss not coverable by filter
  @ffi.Int()
  external int pktRcvFilterLossTotal;

  /// number of control packets supplied by packet filter
  @ffi.Int()
  external int pktSndFilterExtra;

  /// number of control packets received and not supplied back
  @ffi.Int()
  external int pktRcvFilterExtra;

  /// number of packets that the filter supplied extra (e.g. FEC rebuilt)
  @ffi.Int()
  external int pktRcvFilterSupply;

  /// number of packet loss not coverable by filter
  @ffi.Int()
  external int pktRcvFilterLoss;

  /// packet reorder tolerance value
  @ffi.Int()
  external int pktReorderTolerance;

  /// total number of data packets sent by the application
  @ffi.Int64()
  external int pktSentUniqueTotal;

  /// total number of packets to be received by the application
  @ffi.Int64()
  external int pktRecvUniqueTotal;

  /// total number of data bytes, sent by the application
  @ffi.Uint64()
  external int byteSentUniqueTotal;

  /// total number of data bytes to be received by the application
  @ffi.Uint64()
  external int byteRecvUniqueTotal;

  /// number of data packets sent by the application
  @ffi.Int64()
  external int pktSentUnique;

  /// number of packets to be received by the application
  @ffi.Int64()
  external int pktRecvUnique;

  /// number of data bytes, sent by the application
  @ffi.Uint64()
  external int byteSentUnique;

  /// number of data bytes to be received by the application
  @ffi.Uint64()
  external int byteRecvUnique;
}

/// Error codes - define outside the CUDTException class
/// because otherwise you'd have to use CUDTException::MJ_SUCCESS etc.
/// in all throw CUDTException expressions.
abstract class CodeMajor {
  static const int MJ_UNKNOWN = -1;
  static const int MJ_SUCCESS = 0;
  static const int MJ_SETUP = 1;
  static const int MJ_CONNECTION = 2;
  static const int MJ_SYSTEMRES = 3;
  static const int MJ_FILESYSTEM = 4;
  static const int MJ_NOTSUP = 5;
  static const int MJ_AGAIN = 6;
  static const int MJ_PEERERROR = 7;
}

abstract class CodeMinor {
  /// These are "minor" error codes from various "major" categories
  /// MJ_SETUP
  static const int MN_NONE = 0;
  static const int MN_TIMEOUT = 1;
  static const int MN_REJECTED = 2;
  static const int MN_NORES = 3;
  static const int MN_SECURITY = 4;
  static const int MN_CLOSED = 5;

  /// MJ_CONNECTION
  static const int MN_CONNLOST = 1;
  static const int MN_NOCONN = 2;

  /// MJ_SYSTEMRES
  static const int MN_THREAD = 1;
  static const int MN_MEMORY = 2;
  static const int MN_OBJECT = 3;

  /// MJ_FILESYSTEM
  static const int MN_SEEKGFAIL = 1;
  static const int MN_READFAIL = 2;
  static const int MN_SEEKPFAIL = 3;
  static const int MN_WRITEFAIL = 4;

  /// MJ_NOTSUP
  static const int MN_ISBOUND = 1;
  static const int MN_ISCONNECTED = 2;
  static const int MN_INVAL = 3;
  static const int MN_SIDINVAL = 4;
  static const int MN_ISUNBOUND = 5;
  static const int MN_NOLISTEN = 6;
  static const int MN_ISRENDEZVOUS = 7;
  static const int MN_ISRENDUNBOUND = 8;
  static const int MN_INVALMSGAPI = 9;
  static const int MN_INVALBUFFERAPI = 10;
  static const int MN_BUSY = 11;
  static const int MN_XSIZE = 12;
  static const int MN_EIDINVAL = 13;
  static const int MN_EEMPTY = 14;
  static const int MN_BUSYPORT = 15;

  /// MJ_AGAIN
  static const int MN_WRAVAIL = 1;
  static const int MN_RDAVAIL = 2;
  static const int MN_XMTIMEOUT = 3;
  static const int MN_CONGESTION = 4;
}

/// Some better way to define it, and better for C language.
abstract class SRT_ERRNO {
  static const int SRT_EUNKNOWN = -1;
  static const int SRT_SUCCESS = 0;
  static const int SRT_ECONNSETUP = 1000;
  static const int SRT_ENOSERVER = 1001;
  static const int SRT_ECONNREJ = 1002;
  static const int SRT_ESOCKFAIL = 1003;
  static const int SRT_ESECFAIL = 1004;
  static const int SRT_ESCLOSED = 1005;
  static const int SRT_ECONNFAIL = 2000;
  static const int SRT_ECONNLOST = 2001;
  static const int SRT_ENOCONN = 2002;
  static const int SRT_ERESOURCE = 3000;
  static const int SRT_ETHREAD = 3001;
  static const int SRT_ENOBUF = 3002;
  static const int SRT_ESYSOBJ = 3003;
  static const int SRT_EFILE = 4000;
  static const int SRT_EINVRDOFF = 4001;
  static const int SRT_ERDPERM = 4002;
  static const int SRT_EINVWROFF = 4003;
  static const int SRT_EWRPERM = 4004;
  static const int SRT_EINVOP = 5000;
  static const int SRT_EBOUNDSOCK = 5001;
  static const int SRT_ECONNSOCK = 5002;
  static const int SRT_EINVPARAM = 5003;
  static const int SRT_EINVSOCK = 5004;
  static const int SRT_EUNBOUNDSOCK = 5005;
  static const int SRT_ENOLISTEN = 5006;
  static const int SRT_ERDVNOSERV = 5007;
  static const int SRT_ERDVUNBOUND = 5008;
  static const int SRT_EINVALMSGAPI = 5009;
  static const int SRT_EINVALBUFFERAPI = 5010;
  static const int SRT_EDUPLISTEN = 5011;
  static const int SRT_ELARGEMSG = 5012;
  static const int SRT_EINVPOLLID = 5013;
  static const int SRT_EPOLLEMPTY = 5014;
  static const int SRT_EBINDCONFLICT = 5015;
  static const int SRT_EASYNCFAIL = 6000;
  static const int SRT_EASYNCSND = 6001;
  static const int SRT_EASYNCRCV = 6002;
  static const int SRT_ETIMEOUT = 6003;
  static const int SRT_ECONGEST = 6004;
  static const int SRT_EPEERERR = 7000;
}

abstract class SRT_REJECT_REASON {
  /// initial set when in progress
  static const int SRT_REJ_UNKNOWN = 0;

  /// broken due to system function error
  static const int SRT_REJ_SYSTEM = 1;

  /// connection was rejected by peer
  static const int SRT_REJ_PEER = 2;

  /// internal problem with resource allocation
  static const int SRT_REJ_RESOURCE = 3;

  /// incorrect data in handshake messages
  static const int SRT_REJ_ROGUE = 4;

  /// listener's backlog exceeded
  static const int SRT_REJ_BACKLOG = 5;

  /// internal program error
  static const int SRT_REJ_IPE = 6;

  /// socket is closing
  static const int SRT_REJ_CLOSE = 7;

  /// peer is older version than agent's minimum set
  static const int SRT_REJ_VERSION = 8;

  /// rendezvous cookie collision
  static const int SRT_REJ_RDVCOOKIE = 9;

  /// wrong password
  static const int SRT_REJ_BADSECRET = 10;

  /// password required or unexpected
  static const int SRT_REJ_UNSECURE = 11;

  /// streamapi/messageapi collision
  static const int SRT_REJ_MESSAGEAPI = 12;

  /// incompatible congestion-controller type
  static const int SRT_REJ_CONGESTION = 13;

  /// incompatible packet filter
  static const int SRT_REJ_FILTER = 14;

  /// incompatible group
  static const int SRT_REJ_GROUP = 15;

  /// connection timeout
  static const int SRT_REJ_TIMEOUT = 16;
  static const int SRT_REJ_E_SIZE = 17;
}

abstract class SRT_KM_STATE {
  /// No encryption
  static const int SRT_KM_S_UNSECURED = 0;

  /// Stream encrypted, exchanging Keying Material
  static const int SRT_KM_S_SECURING = 1;

  /// Stream encrypted, keying Material exchanged, decrypting ok.
  static const int SRT_KM_S_SECURED = 2;

  /// Stream encrypted and no secret to decrypt Keying Material
  static const int SRT_KM_S_NOSECRET = 3;

  /// Stream encrypted and wrong secret is used, cannot decrypt Keying Material
  static const int SRT_KM_S_BADSECRET = 4;
}

abstract class SRT_EPOLL_OPT {
  /// fallback
  static const int SRT_EPOLL_OPT_NONE = 0;

  /// Ready for 'recv' operation:
  ///
  /// - For stream mode it means that at least 1 byte is available.
  /// In this mode the buffer may extract only a part of the packet,
  /// leaving next data possible for extraction later.
  ///
  /// - For message mode it means that there is at least one packet
  /// available (this may change in future, as it is desired that
  /// one full message should only wake up, not single packet of a
  /// not yet extractable message).
  ///
  /// - For live mode it means that there's at least one packet
  /// ready to play.
  ///
  /// - For listener sockets, this means that there is a new connection
  /// waiting for pickup through the `srt_accept()` call, that is,
  /// the next call to `srt_accept()` will succeed without blocking
  /// (see an alias SRT_EPOLL_ACCEPT below).
  static const int SRT_EPOLL_IN = 1;

  /// Ready for 'send' operation.
  ///
  /// - For stream mode it means that there's a free space in the
  /// sender buffer for at least 1 byte of data. The next send
  /// operation will only allow to send as much data as it is free
  /// space in the buffer.
  ///
  /// - For message mode it means that there's a free space for at
  /// least one UDP packet. The edge-triggered mode can be used to
  /// pick up updates as the free space in the sender buffer grows.
  ///
  /// - For live mode it means that there's a free space for at least
  /// one UDP packet. On the other hand, no readiness for OUT usually
  /// means an extraordinary congestion on the link, meaning also that
  /// you should immediately slow down the sending rate or you may get
  /// a connection break soon.
  ///
  /// - For non-blocking sockets used with `srt_connect*` operation,
  /// this flag simply means that the connection was established.
  static const int SRT_EPOLL_OUT = 4;

  /// The socket has encountered an error in the last operation
  /// and the next operation on that socket will end up with error.
  /// You can retry the operation, but getting the error from it
  /// is certain, so you may as well close the socket.
  static const int SRT_EPOLL_ERR = 8;

  /// To avoid confusion in the internal code, the following
  /// duplicates are introduced to improve clarity.
  static const int SRT_EPOLL_CONNECT = 4;
  static const int SRT_EPOLL_ACCEPT = 1;
  static const int SRT_EPOLL_UPDATE = 16;
  static const int SRT_EPOLL_ET = -2147483648;
}

abstract class SRT_EPOLL_FLAGS {
  /// This allows the EID container to be empty when calling the waiting
  /// function with infinite time. This means an infinite hangup, although
  /// a socket can be added to this EID from a separate thread.
  static const int SRT_EPOLL_ENABLE_EMPTY = 1;

  /// This makes the waiting function check if there is output container
  /// passed to it, and report an error if it isn't. By default it is allowed
  /// that the output container is 0 size or NULL and therefore the readiness
  /// state is reported only as a number of ready sockets from return value.
  static const int SRT_EPOLL_ENABLE_OUTPUTCHECK = 2;
}

typedef SRTSOCKET = ffi.Int32;
typedef DartSRTSOCKET = int;
typedef UDPSOCKET = SYSSOCKET;
typedef SYSSOCKET = ffi.Int;
typedef DartSYSSOCKET = int;
typedef srt_listen_callback_fn = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void> opaq,
        SRTSOCKET ns,
        ffi.Int hsversion,
        ffi.Pointer<sockaddr> peeraddr,
        ffi.Pointer<ffi.Char> streamid)>;
typedef srt_connect_callback_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> opaq, SRTSOCKET ns,
        ffi.Int errorcode, ffi.Pointer<sockaddr> peeraddr, ffi.Int token)>;

final class SRT_SocketGroupData_ extends ffi.Struct {
  @SRTSOCKET()
  external int id;

  /// Don't want to expose sockaddr_any to public API
  external sockaddr_storage peeraddr;

  @ffi.Int32()
  external int sockstate;

  @ffi.Uint16()
  external int weight;

  @ffi.Int32()
  external int memberstate;

  @ffi.Int()
  external int result;

  @ffi.Int()
  external int token;
}

abstract class SRT_MemberStatus {
  /// The socket is created correctly, but not yet ready for getting data.
  static const int SRT_GST_PENDING = 0;

  /// The socket is ready to be activated
  static const int SRT_GST_IDLE = 1;

  /// The socket was already activated and is in use
  static const int SRT_GST_RUNNING = 2;

  /// The last operation broke the socket, it should be closed.
  static const int SRT_GST_BROKEN = 3;
}

final class SRT_MsgCtrl_ extends ffi.Struct {
  /// Left for future
  @ffi.Int()
  external int flags;

  /// TTL for a message (millisec), default -1 (no TTL limitation)
  @ffi.Int()
  external int msgttl;

  /// Whether a message is allowed to supersede partially lost one. Unused in stream and live mode.
  @ffi.Int()
  external int inorder;

  /// 0:mid pkt, 1(01b):end of frame, 2(11b):complete frame, 3(10b): start of frame
  @ffi.Int()
  external int boundary;

  /// source time since epoch (usec), 0: use internal time (sender)
  @ffi.Int64()
  external int srctime;

  /// sequence number of the first packet in received message (unused for sending)
  @ffi.Int32()
  external int pktseq;

  /// message number (output value for both sending and receiving)
  @ffi.Int32()
  external int msgno;

  external ffi.Pointer<SRT_SOCKGROUPDATA> grpdata;

  @ffi.Size()
  external int grpdata_size;
}

typedef SRT_SOCKGROUPDATA = SRT_SocketGroupData_;
typedef SRT_MSGCTRL = SRT_MsgCtrl_;
typedef SRT_TRACEBSTATS = CBytePerfMon;

final class SRT_EPOLL_EVENT_STR extends ffi.Struct {
  @SRTSOCKET()
  external int fd;

  /// SRT_EPOLL_IN | SRT_EPOLL_OUT | SRT_EPOLL_ERR
  @ffi.Int()
  external int events;
}

typedef SRT_EPOLL_EVENT = SRT_EPOLL_EVENT_STR;

/// Handler type.
typedef SRT_LOG_HANDLER_FN = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> opaque,
        ffi.Int level,
        ffi.Pointer<ffi.Char> file,
        ffi.Int line,
        ffi.Pointer<ffi.Char> area,
        ffi.Pointer<ffi.Char> message)>;

/// SRT Socket Groups API (ENABLE_BONDING)
abstract class SRT_GROUP_TYPE {
  static const int SRT_GTYPE_UNDEFINED = 0;
  static const int SRT_GTYPE_BROADCAST = 1;
  static const int SRT_GTYPE_BACKUP = 2;

  /// ...
  static const int SRT_GTYPE_E_END = 3;
}

final class SRT_SocketOptionObject extends ffi.Opaque {}

final class SRT_GroupMemberConfig_ extends ffi.Struct {
  @SRTSOCKET()
  external int id;

  external sockaddr_storage srcaddr;

  /// Don't want to expose sockaddr_any to public API
  external sockaddr_storage peeraddr;

  @ffi.Uint16()
  external int weight;

  external ffi.Pointer<SRT_SOCKOPT_CONFIG> config;

  @ffi.Int()
  external int errorcode;

  @ffi.Int()
  external int token;
}

typedef SRT_SOCKOPT_CONFIG = SRT_SocketOptionObject;
typedef SRT_SOCKGROUPCONFIG = SRT_GroupMemberConfig_;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_ETHERNET = 143;

const int IPPROTO_RAW = 255;

const int IPPROTO_MPTCP = 262;

const int IPPROTO_MAX = 263;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _SC_MINSIGSTKSZ = 249;

const int _SC_SIGSTKSZ = 250;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int _SYS_TYPES_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _SYS_SOCKET_H = 1;

const int __iovec_defined = 1;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MCTP = 45;

const int PF_MAX = 46;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MCTP = 45;

const int AF_MAX = 46;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOMAXCONN = 4096;

const int _BITS_SOCKADDR_H = 1;

const int __SOCKADDR_COMMON_SIZE = 2;

const int _SS_SIZE = 128;

const int _SS_PADSIZE = 118;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int __BITS_PER_LONG = 64;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCGSTAMPNS_OLD = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_PREFER_BUSY_POLL = 69;

const int SO_BUSY_POLL_BUDGET = 70;

const int SO_NETNS_COOKIE = 71;

const int SO_BUF_LOCK = 72;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int __osockaddr_defined = 1;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int _SYS_IOCTL_H = 1;

const int _IOC_NRBITS = 8;

const int _IOC_TYPEBITS = 8;

const int _IOC_SIZEBITS = 14;

const int _IOC_DIRBITS = 2;

const int _IOC_NRMASK = 255;

const int _IOC_TYPEMASK = 255;

const int _IOC_SIZEMASK = 16383;

const int _IOC_DIRMASK = 3;

const int _IOC_NRSHIFT = 0;

const int _IOC_TYPESHIFT = 8;

const int _IOC_SIZESHIFT = 16;

const int _IOC_DIRSHIFT = 30;

const int _IOC_NONE = 0;

const int _IOC_WRITE = 1;

const int _IOC_READ = 2;

const int IOC_IN = 1073741824;

const int IOC_OUT = 2147483648;

const int IOC_INOUT = 3221225472;

const int IOCSIZE_MASK = 1073676288;

const int IOCSIZE_SHIFT = 16;

const int TCGETS = 21505;

const int TCSETS = 21506;

const int TCSETSW = 21507;

const int TCSETSF = 21508;

const int TCGETA = 21509;

const int TCSETA = 21510;

const int TCSETAW = 21511;

const int TCSETAF = 21512;

const int TCSBRK = 21513;

const int TCXONC = 21514;

const int TCFLSH = 21515;

const int TIOCEXCL = 21516;

const int TIOCNXCL = 21517;

const int TIOCSCTTY = 21518;

const int TIOCGPGRP = 21519;

const int TIOCSPGRP = 21520;

const int TIOCOUTQ = 21521;

const int TIOCSTI = 21522;

const int TIOCGWINSZ = 21523;

const int TIOCSWINSZ = 21524;

const int TIOCMGET = 21525;

const int TIOCMBIS = 21526;

const int TIOCMBIC = 21527;

const int TIOCMSET = 21528;

const int TIOCGSOFTCAR = 21529;

const int TIOCSSOFTCAR = 21530;

const int FIONREAD = 21531;

const int TIOCINQ = 21531;

const int TIOCLINUX = 21532;

const int TIOCCONS = 21533;

const int TIOCGSERIAL = 21534;

const int TIOCSSERIAL = 21535;

const int TIOCPKT = 21536;

const int FIONBIO = 21537;

const int TIOCNOTTY = 21538;

const int TIOCSETD = 21539;

const int TIOCGETD = 21540;

const int TCSBRKP = 21541;

const int TIOCSBRK = 21543;

const int TIOCCBRK = 21544;

const int TIOCGSID = 21545;

const int TIOCGRS485 = 21550;

const int TIOCSRS485 = 21551;

const int TIOCGPTN = 2147767344;

const int TIOCSPTLCK = 1074025521;

const int TIOCGDEV = 2147767346;

const int TCGETX = 21554;

const int TCSETX = 21555;

const int TCSETXF = 21556;

const int TCSETXW = 21557;

const int TIOCSIG = 1074025526;

const int TIOCVHANGUP = 21559;

const int TIOCGPKT = 2147767352;

const int TIOCGPTLCK = 2147767353;

const int TIOCGEXCL = 2147767360;

const int TIOCGPTPEER = 21569;

const int FIONCLEX = 21584;

const int FIOCLEX = 21585;

const int FIOASYNC = 21586;

const int TIOCSERCONFIG = 21587;

const int TIOCSERGWILD = 21588;

const int TIOCSERSWILD = 21589;

const int TIOCGLCKTRMIOS = 21590;

const int TIOCSLCKTRMIOS = 21591;

const int TIOCSERGSTRUCT = 21592;

const int TIOCSERGETLSR = 21593;

const int TIOCSERGETMULTI = 21594;

const int TIOCSERSETMULTI = 21595;

const int TIOCMIWAIT = 21596;

const int TIOCGICOUNT = 21597;

const int FIOQSIZE = 21600;

const int TIOCPKT_DATA = 0;

const int TIOCPKT_FLUSHREAD = 1;

const int TIOCPKT_FLUSHWRITE = 2;

const int TIOCPKT_STOP = 4;

const int TIOCPKT_START = 8;

const int TIOCPKT_NOSTOP = 16;

const int TIOCPKT_DOSTOP = 32;

const int TIOCPKT_IOCTL = 64;

const int TIOCSER_TEMT = 1;

const int SIOCADDRT = 35083;

const int SIOCDELRT = 35084;

const int SIOCRTMSG = 35085;

const int SIOCGIFNAME = 35088;

const int SIOCSIFLINK = 35089;

const int SIOCGIFCONF = 35090;

const int SIOCGIFFLAGS = 35091;

const int SIOCSIFFLAGS = 35092;

const int SIOCGIFADDR = 35093;

const int SIOCSIFADDR = 35094;

const int SIOCGIFDSTADDR = 35095;

const int SIOCSIFDSTADDR = 35096;

const int SIOCGIFBRDADDR = 35097;

const int SIOCSIFBRDADDR = 35098;

const int SIOCGIFNETMASK = 35099;

const int SIOCSIFNETMASK = 35100;

const int SIOCGIFMETRIC = 35101;

const int SIOCSIFMETRIC = 35102;

const int SIOCGIFMEM = 35103;

const int SIOCSIFMEM = 35104;

const int SIOCGIFMTU = 35105;

const int SIOCSIFMTU = 35106;

const int SIOCSIFNAME = 35107;

const int SIOCSIFHWADDR = 35108;

const int SIOCGIFENCAP = 35109;

const int SIOCSIFENCAP = 35110;

const int SIOCGIFHWADDR = 35111;

const int SIOCGIFSLAVE = 35113;

const int SIOCSIFSLAVE = 35120;

const int SIOCADDMULTI = 35121;

const int SIOCDELMULTI = 35122;

const int SIOCGIFINDEX = 35123;

const int SIOGIFINDEX = 35123;

const int SIOCSIFPFLAGS = 35124;

const int SIOCGIFPFLAGS = 35125;

const int SIOCDIFADDR = 35126;

const int SIOCSIFHWBROADCAST = 35127;

const int SIOCGIFCOUNT = 35128;

const int SIOCGIFBR = 35136;

const int SIOCSIFBR = 35137;

const int SIOCGIFTXQLEN = 35138;

const int SIOCSIFTXQLEN = 35139;

const int SIOCDARP = 35155;

const int SIOCGARP = 35156;

const int SIOCSARP = 35157;

const int SIOCDRARP = 35168;

const int SIOCGRARP = 35169;

const int SIOCSRARP = 35170;

const int SIOCGIFMAP = 35184;

const int SIOCSIFMAP = 35185;

const int SIOCADDDLCI = 35200;

const int SIOCDELDLCI = 35201;

const int SIOCDEVPRIVATE = 35312;

const int SIOCPROTOPRIVATE = 35296;

const int NCC = 8;

const int TIOCM_LE = 1;

const int TIOCM_DTR = 2;

const int TIOCM_RTS = 4;

const int TIOCM_ST = 8;

const int TIOCM_SR = 16;

const int TIOCM_CTS = 32;

const int TIOCM_CAR = 64;

const int TIOCM_RNG = 128;

const int TIOCM_DSR = 256;

const int TIOCM_CD = 64;

const int TIOCM_RI = 128;

const int N_TTY = 0;

const int N_SLIP = 1;

const int N_MOUSE = 2;

const int N_PPP = 3;

const int N_STRIP = 4;

const int N_AX25 = 5;

const int N_X25 = 6;

const int N_6PACK = 7;

const int N_MASC = 8;

const int N_R3964 = 9;

const int N_PROFIBUS_FDL = 10;

const int N_IRDA = 11;

const int N_SMSBLOCK = 12;

const int N_HDLC = 13;

const int N_SYNC_PPP = 14;

const int N_HCI = 15;

const int CEOF = 4;

const int CEOL = 0;

const int CERASE = 127;

const int CINTR = 3;

const int CSTATUS = 0;

const int CKILL = 21;

const int CMIN = 1;

const int CQUIT = 28;

const int CSUSP = 26;

const int CTIME = 0;

const int CDSUSP = 25;

const int CSTART = 17;

const int CSTOP = 19;

const int CLNEXT = 22;

const int CDISCARD = 15;

const int CWERASE = 23;

const int CREPRINT = 18;

const int CEOT = 4;

const int CBRK = 0;

const int CRPRNT = 18;

const int CFLUSH = 15;

const int _SYS_TIME_H = 1;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int _NETDB_H = 1;

const int _NETINET_IN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int __USE_KERNEL_IPV6_DEFS = 0;

const int IP_OPTIONS = 4;

const int IP_HDRINCL = 3;

const int IP_TOS = 1;

const int IP_TTL = 2;

const int IP_RECVOPTS = 6;

const int IP_RECVRETOPTS = 7;

const int IP_RETOPTS = 7;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_TTL = 33;

const int IP_MULTICAST_LOOP = 34;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_BLOCK_SOURCE = 38;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_MSFILTER = 41;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int IP_MULTICAST_ALL = 49;

const int IP_UNICAST_IF = 50;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int IP_ROUTER_ALERT = 5;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_MTU_DISCOVER = 10;

const int IP_RECVERR = 11;

const int IP_RECVTTL = 12;

const int IP_RECVTOS = 13;

const int IP_MTU = 14;

const int IP_FREEBIND = 15;

const int IP_IPSEC_POLICY = 16;

const int IP_XFRM_POLICY = 17;

const int IP_PASSSEC = 18;

const int IP_TRANSPARENT = 19;

const int IP_ORIGDSTADDR = 20;

const int IP_RECVORIGDSTADDR = 20;

const int IP_MINTTL = 21;

const int IP_NODEFRAG = 22;

const int IP_CHECKSUM = 23;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_RECVFRAGSIZE = 25;

const int IP_RECVERR_RFC4884 = 26;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_WANT = 1;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int SOL_IP = 0;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MAX_MEMBERSHIPS = 20;

const int IPV6_ADDRFORM = 1;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292RTHDR = 5;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_CHECKSUM = 7;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_NEXTHOP = 9;

const int IPV6_AUTHHDR = 10;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MTU = 24;

const int IPV6_RECVERR = 25;

const int IPV6_V6ONLY = 26;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_RECVERR_RFC4884 = 31;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_XFRM_POLICY = 35;

const int IPV6_HDRINCL = 36;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_PKTINFO = 50;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_HOPLIMIT = 52;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_HOPOPTS = 54;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RTHDR = 57;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_DSTOPTS = 59;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_PATHMTU = 61;

const int IPV6_DONTFRAG = 62;

const int IPV6_RECVTCLASS = 66;

const int IPV6_TCLASS = 67;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_IF = 76;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_FREEBIND = 78;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int SOL_IPV6 = 41;

const int SOL_ICMPV6 = 58;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_TP1 = 29;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_AH1 = 51;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_UDPLITE1 = 136;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_ETHERNET1 = 143;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_MPTCP1 = 262;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_MH1 = 135;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int INADDR_DUMMY = 3221225480;

const int IN_LOOPBACKNET = 127;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INET_ADDRSTRLEN = 16;

const int INET6_ADDRSTRLEN = 46;

const int _RPC_NETDB_H = 1;

const String _PATH_HEQUIV = '/etc/hosts.equiv';

const String _PATH_HOSTS = '/etc/hosts';

const String _PATH_NETWORKS = '/etc/networks';

const String _PATH_NSSWITCH_CONF = '/etc/nsswitch.conf';

const String _PATH_PROTOCOLS = '/etc/protocols';

const String _PATH_SERVICES = '/etc/services';

const int HOST_NOT_FOUND = 1;

const int TRY_AGAIN = 2;

const int NO_RECOVERY = 3;

const int NO_DATA = 4;

const int NETDB_INTERNAL = -1;

const int NETDB_SUCCESS = 0;

const int NO_ADDRESS = 4;

const int IPPORT_RESERVED1 = 1024;

const int AI_PASSIVE = 1;

const int AI_CANONNAME = 2;

const int AI_NUMERICHOST = 4;

const int AI_V4MAPPED = 8;

const int AI_ALL = 16;

const int AI_ADDRCONFIG = 32;

const int AI_NUMERICSERV = 1024;

const int EAI_BADFLAGS = -1;

const int EAI_NONAME = -2;

const int EAI_AGAIN = -3;

const int EAI_FAIL = -4;

const int EAI_FAMILY = -6;

const int EAI_SOCKTYPE = -7;

const int EAI_SERVICE = -8;

const int EAI_MEMORY = -10;

const int EAI_SYSTEM = -11;

const int EAI_OVERFLOW = -12;

const int NI_MAXHOST = 1025;

const int NI_MAXSERV = 32;

const int NI_NUMERICHOST = 1;

const int NI_NUMERICSERV = 2;

const int NI_NOFQDN = 4;

const int NI_NAMEREQD = 8;

const int NI_DGRAM = 16;

const int _ARPA_INET_H = 1;

const int _UNISTD_H = 1;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int NULL = 0;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX1 = 3;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF1 = 5;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_NO_TRUNC1 = 7;

const int _PC_VDISABLE1 = 8;

const int _PC_SYNC_IO1 = 9;

const int _PC_ASYNC_IO1 = 10;

const int _PC_PRIO_IO1 = 11;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_2_SYMLINKS1 = 20;

const int _SC_ARG_MAX1 = 0;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK1 = 2;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_OPEN_MAX1 = 4;

const int _SC_STREAM_MAX1 = 5;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_SAVED_IDS1 = 8;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_TIMERS1 = 11;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_FSYNC1 = 15;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_VERSION1 = 29;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_TIMER_MAX1 = 35;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_LINE_MAX1 = 43;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_2_VERSION1 = 46;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_PII1 = 53;

const int _SC_PII_XTI1 = 54;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_OSI1 = 57;

const int _SC_POLL1 = 58;

const int _SC_SELECT1 = 59;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_M1 = 65;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_PASS_MAX1 = 88;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_UPE1 = 97;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG41 = 100;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN1 = 103;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN1 = 105;

const int _SC_LONG_BIT1 = 106;

const int _SC_WORD_BIT1 = 107;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_NZERO1 = 109;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN1 = 114;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX1 = 116;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USHRT_MAX1 = 118;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE1 = 134;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_CPUTIME1 = 138;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO1 = 144;

const int _SC_PIPE1 = 145;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_NETWORKING1 = 152;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_SHELL1 = 157;

const int _SC_SIGNALS1 = 158;

const int _SC_SPAWN1 = 159;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_STREAMS1 = 174;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_IPV61 = 235;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _SC_MINSIGSTKSZ1 = 249;

const int _SC_SIGSTKSZ1 = 250;

const int _CS_PATH1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_V6_ENV1 = 1148;

const int _CS_V7_ENV1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int _FCNTL_H = 1;

const int __O_LARGEFILE = 0;

const int F_GETLK64 = 5;

const int F_SETLK64 = 6;

const int F_SETLKW64 = 7;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int __O_DIRECTORY = 65536;

const int __O_NOFOLLOW = 131072;

const int __O_CLOEXEC = 524288;

const int __O_DIRECT = 16384;

const int __O_NOATIME = 262144;

const int __O_PATH = 2097152;

const int __O_DSYNC = 4096;

const int __O_TMPFILE = 4259840;

const int F_GETLK = 5;

const int F_SETLK = 6;

const int F_SETLKW = 7;

const int O_DIRECTORY = 65536;

const int O_NOFOLLOW = 131072;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int __F_SETOWN = 8;

const int __F_GETOWN = 9;

const int F_SETOWN = 8;

const int F_GETOWN = 9;

const int __F_SETSIG = 10;

const int __F_GETSIG = 11;

const int __F_SETOWN_EX = 15;

const int __F_GETOWN_EX = 16;

const int F_DUPFD_CLOEXEC = 1030;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 0;

const int F_WRLCK = 1;

const int F_UNLCK = 2;

const int F_EXLCK = 4;

const int F_SHLCK = 8;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int FAPPEND = 1024;

const int FFSYNC = 1052672;

const int FASYNC = 8192;

const int FNONBLOCK = 2048;

const int FNDELAY = 2048;

const int __POSIX_FADV_DONTNEED = 4;

const int __POSIX_FADV_NOREUSE = 5;

const int POSIX_FADV_NORMAL = 0;

const int POSIX_FADV_RANDOM = 1;

const int POSIX_FADV_SEQUENTIAL = 2;

const int POSIX_FADV_WILLNEED = 3;

const int POSIX_FADV_DONTNEED = 4;

const int POSIX_FADV_NOREUSE = 5;

const int AT_FDCWD = -100;

const int AT_SYMLINK_NOFOLLOW = 256;

const int AT_REMOVEDIR = 512;

const int AT_SYMLINK_FOLLOW = 1024;

const int AT_EACCESS = 512;

const int _BITS_STAT_H = 1;

const int _BITS_STRUCT_STAT_H = 1;

const int __S_IFMT = 61440;

const int __S_IFDIR = 16384;

const int __S_IFCHR = 8192;

const int __S_IFBLK = 24576;

const int __S_IFREG = 32768;

const int __S_IFIFO = 4096;

const int __S_IFLNK = 40960;

const int __S_IFSOCK = 49152;

const int __S_ISUID = 2048;

const int __S_ISGID = 1024;

const int __S_ISVTX = 512;

const int __S_IREAD = 256;

const int __S_IWRITE = 128;

const int __S_IEXEC = 64;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXU = 448;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXG = 56;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_IRWXO = 7;

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int _STRING_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _ALLOCA_H = 1;

const int _SYS_SYSLOG_H = 1;

const int __GNUC_VA_LIST = 1;

const int _BITS_SYSLOG_PATH_H = 1;

const String _PATH_LOG = '/dev/log';

const int LOG_EMERG = 0;

const int LOG_ALERT = 1;

const int LOG_CRIT = 2;

const int LOG_ERR = 3;

const int LOG_WARNING = 4;

const int LOG_NOTICE = 5;

const int LOG_INFO = 6;

const int LOG_DEBUG = 7;

const int LOG_PRIMASK = 7;

const int LOG_KERN = 0;

const int LOG_USER = 8;

const int LOG_MAIL = 16;

const int LOG_DAEMON = 24;

const int LOG_AUTH = 32;

const int LOG_SYSLOG = 40;

const int LOG_LPR = 48;

const int LOG_NEWS = 56;

const int LOG_UUCP = 64;

const int LOG_CRON = 72;

const int LOG_AUTHPRIV = 80;

const int LOG_FTP = 88;

const int LOG_LOCAL0 = 128;

const int LOG_LOCAL1 = 136;

const int LOG_LOCAL2 = 144;

const int LOG_LOCAL3 = 152;

const int LOG_LOCAL4 = 160;

const int LOG_LOCAL5 = 168;

const int LOG_LOCAL6 = 176;

const int LOG_LOCAL7 = 184;

const int LOG_NFACILITIES = 24;

const int LOG_FACMASK = 1016;

const int LOG_PID = 1;

const int LOG_CONS = 2;

const int LOG_ODELAY = 4;

const int LOG_NDELAY = 8;

const int LOG_NOWAIT = 16;

const int LOG_PERROR = 32;

const int SRT_VERSION_FEAT_HSv5 = 66304;

const int SRT_HAVE_CXX17 = 0;

const int ENABLE_BONDING = 0;

const int SRT_REJ__SIZE = 17;

const int SRT_REJC_INTERNAL = 0;

const int SRT_REJC_PREDEFINED = 1000;

const int SRT_REJC_USERDEFINED = 2000;

const int SRT_LOGFA_GENERAL = 0;

const int SRT_LOGFA_SOCKMGMT = 1;

const int SRT_LOGFA_CONN = 2;

const int SRT_LOGFA_XTIMER = 3;

const int SRT_LOGFA_TSBPD = 4;

const int SRT_LOGFA_RSRC = 5;

const int SRT_LOGFA_CONGEST = 7;

const int SRT_LOGFA_PFILTER = 8;

const int SRT_LOGFA_API_CTRL = 11;

const int SRT_LOGFA_QUE_CTRL = 13;

const int SRT_LOGFA_EPOLL_UPD = 16;

const int SRT_LOGFA_API_RECV = 21;

const int SRT_LOGFA_BUF_RECV = 22;

const int SRT_LOGFA_QUE_RECV = 23;

const int SRT_LOGFA_CHN_RECV = 24;

const int SRT_LOGFA_GRP_RECV = 25;

const int SRT_LOGFA_API_SEND = 31;

const int SRT_LOGFA_BUF_SEND = 32;

const int SRT_LOGFA_QUE_SEND = 33;

const int SRT_LOGFA_CHN_SEND = 34;

const int SRT_LOGFA_GRP_SEND = 35;

const int SRT_LOGFA_INTERNAL = 41;

const int SRT_LOGFA_QUE_MGMT = 43;

const int SRT_LOGFA_CHN_MGMT = 44;

const int SRT_LOGFA_GRP_MGMT = 45;

const int SRT_LOGFA_EPOLL_API = 46;

const int SRT_LOGFA_HAICRYPT = 6;

const int SRT_LOGFA_APPLOG = 10;

const int SRT_LOGFA_LASTNONE = 63;

const int SRT_EPOLL_ETONLY = 16;

const int SRT_DEFAULT_SENDFILE_BLOCK = 364000;

const int SRT_DEFAULT_RECVFILE_BLOCK = 7280000;

const int SRT_SYNC_CLOCK_STDCXX_STEADY = 0;

const int SRT_SYNC_CLOCK_GETTIME_MONOTONIC = 1;

const int SRT_SYNC_CLOCK_WINQPC = 2;

const int SRT_SYNC_CLOCK_MACH_ABSTIME = 3;

const int SRT_SYNC_CLOCK_POSIX_GETTIMEOFDAY = 4;

const int SRT_SYNC_CLOCK_AMD64_RDTSC = 5;

const int SRT_SYNC_CLOCK_IA32_RDTSC = 6;

const int SRT_SYNC_CLOCK_IA64_ITC = 7;
